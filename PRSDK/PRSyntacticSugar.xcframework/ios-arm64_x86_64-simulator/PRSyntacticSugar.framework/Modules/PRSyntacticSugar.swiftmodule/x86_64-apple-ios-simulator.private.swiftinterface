// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PRSyntacticSugar
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import Foundation
@_exported import PRSyntacticSugar
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
final public class ObjectAssociationProxy<T> {
  public init(policy: ObjectiveC.objc_AssociationPolicy = .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
  final public func value(for instance: Any) -> T?
  final public func set(_ value: T?, for instance: Any)
  @objc deinit
}
extension PRSyntacticSugar.PRBlockUtil {
  public class func perform<T>(_ block: @escaping () throws -> T) throws -> T
}
public func missingImplementationError(_ message: Swift.String? = nil) -> Swift.Never
extension Swift.OptionSet {
  public subscript(option: Self.Element) -> Swift.Bool {
    get
    set
  }
}
public func lift<A, B>(_ tuple: (A?, B?)) -> (A, B)?
public func lift<A, B, C>(_ tuple: (A?, B?, C?)) -> (A, B, C)?
public func lift<A, B>(_ a: A?, _ b: B?) -> (A, B)?
public func lift<A, B, C>(_ a: A?, _ b: B?, _ c: C?) -> (A, B, C)?
public func isSequenceLiftable(args: Any?...) -> Swift.Bool
extension Swift.Dictionary {
  public func bool(_ key: Key) -> Swift.Bool?
}
extension Swift.Dictionary {
  public func int(_ key: Key) -> Swift.Int?
}
extension Swift.Dictionary {
  public func string(_ key: Key) -> Swift.String?
  public func nonEmptyString(_ key: Key) -> Swift.String?
  public func string(_ keys: [Key]) -> Swift.String?
}
@objc extension Foundation.NSDictionary {
  @objc dynamic public func string(_ key: Foundation.NSString) -> Swift.String?
  @objc dynamic public func nonEmptyString(_ key: Foundation.NSString) -> Swift.String?
  @objc dynamic public func string(keys: [Foundation.NSString]) -> Swift.String?
}
public func typeString<T>(_ type: T.Type) -> Swift.String
public func typeString<T>(_ value: T) -> Swift.String
public typealias PROptionSet = PRSyntacticSugar._PROptionSet & Swift.OptionSet
@objc @objcMembers open class _PROptionSet : ObjectiveC.NSObject {
  @objc final public let rawValue: Swift.Int
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc required public init(rawValue: Swift.Int)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
public protocol Emptiable {
  var isEmpty: Swift.Bool { get }
}
extension PRSyntacticSugar.Emptiable {
  public var nonEmpty: Self? {
    get
  }
}
extension Swift.String : PRSyntacticSugar.Emptiable {
}
extension Swift.Array : PRSyntacticSugar.Emptiable {
}
extension Swift.Dictionary : PRSyntacticSugar.Emptiable {
}
extension Swift.Set : PRSyntacticSugar.Emptiable {
}
public protocol Countable : PRSyntacticSugar.Emptiable {
  var count: Swift.Int { get }
}
extension PRSyntacticSugar.Countable {
  public var isEmpty: Swift.Bool {
    get
  }
}
extension Foundation.NSArray : PRSyntacticSugar.Countable {
}
extension Foundation.NSDictionary : PRSyntacticSugar.Countable {
}
extension Foundation.NSSet : PRSyntacticSugar.Countable {
}
extension Foundation.NSOrderedSet : PRSyntacticSugar.Countable {
}
extension Foundation.NSString : PRSyntacticSugar.Countable {
  public var count: Swift.Int {
    get
  }
}
extension Swift.SetAlgebra {
  public mutating func update(_ member: Self.Element, _ set: Swift.Bool)
}
