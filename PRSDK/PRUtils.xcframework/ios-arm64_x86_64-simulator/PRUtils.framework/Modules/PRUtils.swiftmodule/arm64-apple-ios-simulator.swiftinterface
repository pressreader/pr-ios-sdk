// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PRUtils
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import Compression
import CoreLocation
import CryptoKit
import Foundation
import PRConfiguration
import PRLogKit
import PRSyntacticSugar
@_exported import PRUtils
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension CoreLocation.CLLocationCoordinate2D : @retroactive Swift.Equatable {
  public static func == (left: CoreLocation.CLLocationCoordinate2D, right: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
}
@objc extension ObjectiveC.NSObject {
  @objc dynamic public class var className: Swift.String {
    @objc get
  }
  @objc dynamic public var className: Swift.String {
    @objc get
  }
}
@objc extension ObjectiveC.NSObject {
  @objc dynamic open class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc dynamic open var bundle: Foundation.Bundle {
    @objc get
  }
}
extension Swift.Bool {
  public init(_ obj: Any?, defaultValue: Swift.Bool = false)
}
@objc extension Foundation.Bundle {
  @objc dynamic public func path(forResource resource: Swift.String, ofTypes types: [Swift.String]) -> Swift.String?
}
extension Foundation.NSAttributedString {
  @objc(attributedStringByAppendingAttributedString:) dynamic public func appending(_ aString: Foundation.NSAttributedString) -> Foundation.NSAttributedString
  @objc dynamic public func trimmedEnd(set: Foundation.CharacterSet) -> Foundation.NSAttributedString
}
extension Foundation.NSMutableAttributedString {
  @objc override dynamic public func trimmedEnd(set: Foundation.CharacterSet) -> Foundation.NSMutableAttributedString
}
@objc extension Foundation.NSAttributedString {
  public enum InitError : Swift.Error {
    case invalidHTML
    public static func == (a: Foundation.NSAttributedString.InitError, b: Foundation.NSAttributedString.InitError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Options = [Foundation.NSAttributedString.DocumentReadingOptionKey : Any]
  @objc @available(swift, obsoleted: 1.0)
  dynamic public class func htmlAttributedString(_ html: Swift.String) -> Self?
  @objc dynamic public class func htmlAttributedString(_ html: Swift.String, options: Foundation.NSAttributedString.Options = [:], documentAttributes: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSDictionary?>? = nil) throws -> Self
}
extension Foundation.NSAttributedString {
  public func height(constrainingWidth width: CoreFoundation.CGFloat, options: UIKit.NSStringDrawingOptions = [.usesLineFragmentOrigin, .usesFontLeading]) -> CoreFoundation.CGFloat
}
public protocol Observable {
  associatedtype Callback
  func observe(_ callback: Self.Callback) -> Swift.AnyObject
}
extension PRUtils.Observable {
  public func observe(_ callback: Self.Callback) -> Swift.AnyObject
}
@_hasMissingDesignatedInitializers public class Observer<Callback> {
  final public let callback: Callback
  @objc deinit
}
extension PRUtils.Observable {
  public var observers: PRUtils.WeakArray<PRUtils.Observer<Self.Callback>> {
    get
  }
  public func _observe(_ callback: Self.Callback) -> Swift.AnyObject
}
public actor ArrayActor<T> {
  public var items: [T] {
    get
  }
  public init(_ items: [T] = [])
  public func append<S>(contentsOf newElements: S) where T == S.Element, S : Swift.Sequence
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension Foundation.Data {
  public func inflated() -> Foundation.Data?
}
extension Foundation.NSLocking {
  @discardableResult
  public func `do`<Result>(action: () -> Result) -> Result
}
extension Foundation.NSArray {
  @objc(safeObjectAtIndex:) dynamic public func safeObject(at index: Swift.Int) -> Any?
}
extension Foundation.NSMutableArray {
  @objc(safeAddObject:) dynamic public func safeAdd(_ object: Any?)
}
extension Swift.Array {
  public func safeObject(at index: Swift.Int) -> Element?
}
extension Foundation.NSOrderedSet {
  @objc(safeObjectAtIndex:) dynamic public func safeObject(at index: Swift.Int) -> Any?
}
extension Swift.String {
  public var djb2hash: Swift.Int {
    get
  }
  public var sdbmhash: Swift.Int {
    get
  }
  public var sha256Hash: Swift.String? {
    get
  }
}
extension Foundation.JSONSerialization {
  public static func item<T>(json: Any) throws -> T where T : Swift.Decodable
}
extension Swift.Dictionary where Key : Swift.RawRepresentable, Key.RawValue : Swift.Hashable {
  public func rawKeyRepresentation() -> [Swift.Dictionary<Key, Value>.Key.RawValue : Swift.Dictionary<Key, Value>.Value]
}
@objc extension Foundation.NSString {
  @objc dynamic public var firstCharacter: Swift.String? {
    @objc get
  }
  @objc dynamic public var lastCharacter: Swift.String? {
    @objc get
  }
  @objc dynamic public func character(at index: Swift.Int) -> Swift.String?
}
extension ObjectiveC.NSObject {
  @objc(unsubscribeFromNotification:) dynamic public func unsubscribe(notification: Foundation.NSNotification)
}
public protocol DefaultLocalizedError : Foundation.LocalizedError {
}
extension PRUtils.DefaultLocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Foundation.JSONDecoder.DateDecodingStrategy {
  public static let flexibleISO8601: Foundation.JSONDecoder.DateDecodingStrategy
}
public struct TrimOption : Swift.OptionSet {
  public static let null: PRUtils.TrimOption
  public static let emptyCollection: PRUtils.TrimOption
  public static let all: PRUtils.TrimOption
  public var rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = PRUtils.TrimOption
  public typealias Element = PRUtils.TrimOption
  public typealias RawValue = Swift.Int
}
public protocol TrimmableCollection : PRSyntacticSugar.Emptiable {
  func trimmed(options: PRUtils.TrimOption) -> Self
}
extension Swift.Array : PRUtils.TrimmableCollection {
  public func trimmed(options: PRUtils.TrimOption) -> [Element]
}
extension Foundation.NSArray : PRUtils.TrimmableCollection {
  public func trimmed(options: PRUtils.TrimOption) -> Self
}
extension Swift.Dictionary : PRUtils.TrimmableCollection where Value == Any {
  public func trimmed(options: PRUtils.TrimOption) -> [Key : Value]
}
extension Foundation.NSDictionary : PRUtils.TrimmableCollection {
  public func trimmed(options: PRUtils.TrimOption) -> Self
}
extension Swift.Array where Element : Swift.Equatable {
  public mutating func removeFirstOccurrence(_ element: Swift.Array<Element>.Element)
}
extension Swift.Array {
  public mutating func removeFirstOccurrence(where predicate: (Swift.Array<Element>.Element) -> Swift.Bool)
}
extension Foundation.URL {
  public var isHTTP: Swift.Bool {
    get
  }
  public func queryDictionary() -> [Swift.String : Swift.String]
  public var fragmentless: Foundation.URL? {
    get
  }
  public var isSchemeSyntaxNormalised: Swift.Bool {
    get
  }
}
extension Foundation.Date {
  public var canonicalString: Swift.String {
    get
  }
}
@objc extension Foundation.NSDate {
  @objc dynamic public var canonicalString: Swift.String {
    @objc get
  }
}
extension Swift.String {
  public var canonicalDate: Foundation.Date? {
    get
  }
}
@objc extension Foundation.NSString {
  @objc dynamic public var canonicalDate: Foundation.Date? {
    @objc get
  }
}
@objc public enum AuthPriority : Swift.Int {
  case apple
  case facebook
  case google
  case twitter
  case email
  case library
  case other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension PRUtils.PRSignInOption {
  @objc dynamic public var priority: PRUtils.AuthPriority {
    @objc get
  }
}
@objc extension Foundation.NSString {
  @objc dynamic public var stringWithoutHyphenation: Swift.String {
    @objc get
  }
  @objc dynamic public var stringWithProperHyphenation: Swift.String {
    @objc get
  }
}
@objc extension Foundation.NSString {
  @objc(rangesOfPhrases:) dynamic public func ranges(of phrases: [Swift.String]) -> [Foundation.NSValue]
  @objc(rangesOfPhrases:options:) dynamic public func ranges(of phrases: [Swift.String], options: PRUtils.PRStringSearchOption) -> [Foundation.NSValue]
}
extension Swift.String {
  public func url() -> Foundation.URL?
}
@objc extension Foundation.NSString {
  @objc dynamic public func url() -> Foundation.URL?
  @objc dynamic public func urlParameters() -> [Swift.String : Swift.String]
}
@objc extension Foundation.Bundle {
  @objc dynamic public func containsURLScheme(_ urlScheme: Swift.String?) -> Swift.Bool
  @objc dynamic public func firstURLScheme() -> Swift.String?
  @objc dynamic public func containsAssociatedBranchDomain(_ associatedBranchDomain: Swift.String?) -> Swift.Bool
  @objc dynamic public func canHandleURL(_ url: Foundation.URL) -> Swift.Bool
}
extension Swift.Encodable {
  public func jsonObject<T>() -> T?
}
@objc @_inheritsConvenienceInitializers final public class HTMLFormatter : ObjectiveC.NSObject {
  @objc final public class func css(font: UIKit.UIFont, fontSource: Swift.String? = nil, color: UIKit.UIColor? = nil, margin: Foundation.NSNumber? = nil) -> Swift.String
  @objc final public class func isIFrame(_ html: Swift.String) -> Swift.Bool
  @objc final public class func iFrame(html: Swift.String, width: CoreFoundation.CGFloat) -> Swift.String
  @objc final public class func fillWidthWrapper(string: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
final public class WeakArray<T> where T : AnyObject {
  final public var count: Swift.Int {
    get
  }
  public init(_ elements: T...)
  final public func append(_ element: T)
  final public func forEach(reverse: Swift.Bool = false, callback: (T) -> ())
  @objc deinit
}
extension Swift.Result {
  public var isSucceeded: Swift.Bool {
    get
  }
}
public typealias VoidResult = Swift.Result<(), any Swift.Error>
extension Swift.Result where Success == () {
  public static var success: Swift.Result<(), Failure> {
    get
  }
}
extension Foundation.UUID {
  public init(number: Swift.Int64)
}
@objc @_hasMissingDesignatedInitializers public class Synchronizer : ObjectiveC.NSObject {
  @objc public func sync(_ block: @escaping () -> ())
  @objc public func async(_ block: @escaping () -> ())
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class SerialSynchronizer : PRUtils.Synchronizer {
  @objc public init(label: Swift.String? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class ConcurrentSynchronizer : PRUtils.Synchronizer {
  @objc public init(label: Swift.String? = nil)
  @objc final public func barrierSync(_ block: @escaping () -> ())
  @objc final public func barrierAsync(_ block: @escaping () -> ())
  @objc deinit
}
extension Swift.String {
  public var wordCount: Swift.Int {
    get
  }
  public func ranges(of substring: Swift.String, options: Swift.String.CompareOptions = [], locale: Foundation.Locale? = nil) -> [Swift.Range<Swift.String.Index>]
  public func capitalizedFirstLetter() -> Swift.String
  public mutating func capitalizeFirstLetter()
  public func htmlAttributed() -> Foundation.NSMutableAttributedString?
  public func dropPrefix(_ prefix: Swift.String) -> Swift.String
}
extension Foundation.Data {
  public var sha256Hash: Swift.String {
    get
  }
}
public func PRLocalizedString(_ key: Swift.String, default: Swift.String = "") -> Swift.String
@objc extension UIKit.UIApplication {
  @objc @_Concurrency.MainActor @preconcurrency public static let PRRootVCClass: Swift.AnyClass?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var rootVC: UIKit.UIViewController? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var firstKeyWindow: UIKit.UIWindow? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var appWindows: [UIKit.UIWindow] {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var firstWindowSceneStatusBarFrame: CoreFoundation.CGRect {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var firstWindowScene: UIKit.UIWindowScene? {
    @objc get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class SecureStorage : ObjectiveC.NSObject {
  @objc public enum CryptoStorageError : Swift.Int, Swift.Error {
    case unexpected
    case fileNotFound
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public static var _nsErrorDomain: Swift.String {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public init?(path: Swift.String, key: Swift.String, unencryptedFileExtension: Swift.String = "unencrypted", encryptedEnvironment: PRSyntacticSugar.PRRuntimeEnvironmentType = [])
  @objc(loadWithError:) final public func load() throws -> Foundation.Data
  @objc final public func store(_ data: Foundation.Data) throws
  @objc deinit
}
extension PRUtils.SecureStorage {
  final public func load() async throws -> Foundation.Data
  final public func store(_ data: Foundation.Data) async throws
}
extension Swift.Array where Element : Swift.Equatable {
  public mutating func remove(items: [Element])
  public mutating func remove(_ item: Element)
  public func missingItems(from original: [Swift.Array<Element>.Element]) -> [Swift.Array<Element>.Element]?
}
@objc extension Foundation.NSString {
  @objc(sentenceShiftedToPhrases:maxBeginningCharactersCount:) dynamic public func sentence(shiftedTo phrases: [Swift.String], maxBeginningCharactersCount: Swift.Int) -> Foundation.NSString
}
extension Foundation.NSAttributedString.InitError : Swift.Equatable {}
extension Foundation.NSAttributedString.InitError : Swift.Hashable {}
extension PRUtils.AuthPriority : Swift.Equatable {}
extension PRUtils.AuthPriority : Swift.Hashable {}
extension PRUtils.AuthPriority : Swift.RawRepresentable {}
extension PRUtils.SecureStorage.CryptoStorageError : Swift.Equatable {}
extension PRUtils.SecureStorage.CryptoStorageError : Swift.Hashable {}
extension PRUtils.SecureStorage.CryptoStorageError : Swift.RawRepresentable {}
