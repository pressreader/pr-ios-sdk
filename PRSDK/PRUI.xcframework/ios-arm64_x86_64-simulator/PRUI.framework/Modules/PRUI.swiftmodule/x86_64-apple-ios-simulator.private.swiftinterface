// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PRUI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import AuthenticationServices
import BackgroundTasks
import PRAPI.BranchAnalytics
import Combine
import CoreGraphics
import DeveloperToolsSupport
import Foundation
import LinkPresentation.LPLinkMetadata
import LinkPresentation
import MBProgressHUD
import PRUtils.NSNotificationCenter_PRExtension
import PRAPI
import PRAccessibility
import PRAds
import PRAlertKit
import PRAnalytics
import PRCatalogModel
import PRCommands
import PRConfiguration
import PRDIContainer
import PRAPI.PRDictionaryKeys
import PRLogKit.PRLog
import PRLogKit
import PRPromiseKit
import PRProtocols
import PRSmart
import PRSyntacticSugar
import PRThumbnail
@_exported import PRUI
import PRUIKit
import PRUtils
import SDWebImage
import SafariServices
import Swift
import SwiftUI
import UIKit
import UserNotifications
import WKYTPlayerView
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class NTFPageSetCompactView : UIKit.UIView, PRUI.NTFItemCompactView {
  @objc @_Concurrency.MainActor @preconcurrency final public var pageSetItem: PRAPI.NTFPageSetItem? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc final public var action: PRUI.FeedItemAction? {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public let options: PRUI.NTFArticleCompactViewOption
  @_Concurrency.MainActor @preconcurrency @objc final public var feedItem: (any PRAPI.NTFItem)? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(options: PRUI.NTFArticleCompactViewOption)
  @objc @_Concurrency.MainActor @preconcurrency final public func setup(with pageSetItem: PRAPI.NTFPageSetItem?, action: PRUI.FeedItemAction?)
  @_Concurrency.MainActor @preconcurrency @objc final public var textualView: PRUI.NTFArticleCompactTextualView? {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class NTFEmptyRecommendedCell : PRUI.VerticalTextFlowBaseCell {
  @objc @_Concurrency.MainActor @preconcurrency weak final public var owner: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func setup(withRow row: Swift.Int, dataSource: PRUI.NTFDataSource?, actionBlock: PRUI.TextFlowItemAction?, contentWidth: CoreFoundation.CGFloat)
  @objc deinit
}
public protocol WelcomeHotSpotViewDelegate : AnyObject {
  func `continue`()
  func cancel()
}
@objc @_Concurrency.MainActor @preconcurrency final public class WelcomeHotSpotView : PRUIKit.BrandGradientView {
  @_Concurrency.MainActor @preconcurrency public init(delegate: any PRUI.WelcomeHotSpotViewDelegate)
  @objc deinit
}
extension UIKit.UINavigationBar {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func updateAppearance()
}
extension PRUI.AutoTranslationActor {
  @objc @_Concurrency.MainActor final public func autoTranslateArticle(_ article: any ObjectiveC.NSObject & PRAPI.NTFArticle) async throws
  @objc @discardableResult
  @_Concurrency.MainActor final public func translateArticleShortContentIfNeeded(_ article: any ObjectiveC.NSObject & PRAPI.NTFArticle, destinationLanguage: Swift.String, zone: PRAPI.AutoTranslationZone) async throws -> Swift.Bool
  @objc @discardableResult
  @_Concurrency.MainActor final public func resetArticleTranslation(_ article: any ObjectiveC.NSObject & PRAPI.NTFArticle) async throws -> Swift.Bool
}
extension Foundation.NSNotification.Name {
  public static let PRAuthStateDidChange: Foundation.Notification.Name
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class Account : ObjectiveC.NSObject {
  @objc public enum State : Swift.Int {
    case idle
    case notReachable
    case authorising
    case sponsorship
    case localService
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public var state: PRUI.Account.State {
    @objc get
    @objc set
  }
  @objc final public var sponsorshipExpiration: Foundation.Date? {
    @objc get
  }
  @objc final public func authorize(token: Swift.String, completion: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@objc extension PRUI.PRBasePaymentOptionsVC : PRAnalytics.PaymentOptionsAnalyticsProvider {
  @nonobjc @_Concurrency.MainActor @preconcurrency public var context: PRAnalytics.PaymentOptionsAnalyticsContext {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func trackViewDidAppear()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func trackPurchaseRestoreStarted()
}
extension PRUI.NTFMyLibraryItemDataSource : PRAPI.MastheadProvider {
  @objc dynamic public var hasMasthead: Swift.Bool {
    @objc get
  }
  @objc dynamic public func masthead(height: CoreFoundation.CGFloat, style: UIKit.UIUserInterfaceStyle, handler: @escaping PRThumbnail.PRThumbnailHandler)
}
extension UIKit.UINib {
  @objc @_Concurrency.MainActor @preconcurrency public static func bundledNib(name: Swift.String) -> UIKit.UINib?
  @_Concurrency.MainActor @preconcurrency convenience public init(for _class: Swift.AnyClass)
  @available(swift, obsoleted: 1.0)
  @objc @_Concurrency.MainActor @preconcurrency public static func nibForClass(_ _class: Swift.AnyClass) -> UIKit.UINib
}
extension PRUI.PRRadioManager : PRAPI.RadioAnalyticsProvider {
  @objc dynamic public var dataSourceItem: PRAPI.PRSourceItem? {
    @objc get
  }
}
@available(*, unavailable)
@objc extension PRUI.PRRadioManager {
  @objc dynamic public func _trackRadioView()
  @objc dynamic public func _trackRadioStart()
  @objc dynamic public func _trackRadioPauseRestart()
  @objc dynamic public func _trackRadioComplete()
}
@objc extension PRUI.PRAVPlayerActor : PRAPI.RichMediaAnalyticsProvider {
  @objc dynamic public var mediaType: Swift.String {
    @objc get
  }
  @objc dynamic public var issue: (any PRAPI.IssueAnalyticsProvider)? {
    @objc get
  }
  @objc dynamic public var mediaTitle: Swift.String? {
    @objc get
  }
  @objc @available(*, unavailable)
  dynamic public func _trackRichMediaEvent(action: PRAnalytics.RMTAction)
}
extension PRUI.PROrderDelivery : PRAnalytics.RegistrationAnalyticsProvider {
  public var registrationContext: PRAnalytics.RegistrationAnalyticsContext {
    get
  }
}
@objc extension PRUI.PROrderDelivery : PRAnalytics.PaymentOptionsAnalyticsProvider {
  @nonobjc public var context: PRAnalytics.PaymentOptionsAnalyticsContext {
    get
  }
  @objc dynamic public func trackProductPurchaseStarted(_ product: StoreKit.SKProduct)
  @objc(trackProductPurchaseCompleted:) dynamic public func trackProductPurchaseCompleted(success: Swift.Bool)
  @objc(trackProductPurchaseCompleted:error:) dynamic public func trackProductPurchaseCompleted(success: Swift.Bool, error: (any Swift.Error)?)
  @objc dynamic public func trackRestoreCompleted(_ success: Swift.Bool)
  @objc dynamic public func trackPremiumProductOffer()
}
@objc extension PRUI.PRCollectionViewCell {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupAccessibility()
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class CommandOrder : ObjectiveC.NSObject {
  @objc final public class func execute(item: any PRAPI.PRCatalogItem)
  @objc final public class func execute(item: any PRAPI.PRCatalogItem, options: PRUI.PROrderOption = [])
  @objc final public class func execute(item: any PRAPI.PRCatalogItem, options: PRUI.PROrderOption, navigationController: UIKit.UINavigationController?)
  @objc public static func execute(item: any PRAPI.PRCatalogItem, subscriptions: [PRAPI.PRSubscription]? = nil, date: Foundation.Date? = nil, options: PRUI.PROrderOption = [], preferredService: Swift.String? = nil, navigationController: UIKit.UINavigationController? = nil)
  @objc public static func load(_ item: any PRAPI.PRCatalogItem, contentOptions: PRCatalogModel.CatalogItemContentOption, options: PRUI.PROrderOption)
  @objc override dynamic public init()
  @objc deinit
}
public protocol UIStyleOverridable : AnyObject {
  var overrideUserInterfaceStyle: UIKit.UIUserInterfaceStyle { get set }
}
public protocol UIStyleOserver : AnyObject {
  var valueSubject: Combine.CurrentValueSubject<UIKit.UIUserInterfaceStyle, Swift.Never> { get }
  func applyUIStyle()
}
extension PRUI.UIStyleOserver {
  public var isUIStyleApplied: Swift.Bool {
    get
  }
  public var valueSubject: Combine.CurrentValueSubject<UIKit.UIUserInterfaceStyle, Swift.Never> {
    get
  }
  public func registerUIStyleObserver()
  public func unregisterUIStyleObserver()
}
extension PRUI.UIStyleOserver where Self : PRUI.UIStyleOverridable {
  public func applyUIStyle()
}
extension UIKit.UIView : PRUI.UIStyleOverridable {
}
extension UIKit.UIViewController : PRUI.UIStyleOverridable {
}
@objc @_Concurrency.MainActor @preconcurrency final public class StoriesTabSearchVC : PRUI.ArticleSearchVC {
  @_Concurrency.MainActor @preconcurrency public init(dataSource: PRUI.StoriesSearchDataSource)
  @objc deinit
}
@objc extension PRUI.NTFDataSource {
  @objc dynamic public func createLayoutManager() -> any PRUI.PRFeedLayoutManager
}
@_inheritsConvenienceInitializers @objc final public class Regular4CFeedLayoutItem : PRUI.AbstractFeedLayoutItem {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class GigyaManager : ObjectiveC.NSObject {
  @objc public static var shared: PRUI.GigyaManager? {
    @objc get
  }
  @objc public static var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public func signIn(_ completion: ((Swift.Bool, (any Swift.Error)?) -> ())?)
  @objc deinit
}
@objc extension WebKit.WKWebView {
  @objc @_Concurrency.MainActor @preconcurrency convenience dynamic public init(frame: CoreFoundation.CGRect = .zero, configuration: WebKit.WKWebViewConfiguration? = nil, css: Swift.String)
}
extension PRUI.PRSourcesVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func registerAsObserver()
}
extension PRUI.PRSourcesVC : PRUI.PRSourceCategoriesCollectionDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func discloseCategory(_ value: any PRAPI.CatalogNavigation, sender: UIKit.UIView?)
}
@objc extension PRUI.PRBannerProvider {
  @objc dynamic public func getBannerSections() -> [PRAPI.PRCatalogSection]
  @objc dynamic public func allBannersSection() -> PRAPI.PRCatalogSection?
}
@objc extension UIKit.UINavigationItem {
  @objc @available(swift, obsoleted: 1.0)
  @_Concurrency.MainActor @preconcurrency dynamic public func setupTitleView(mastheadProvider: any PRAPI.MastheadProvider, title: Swift.String?, subtitle: Swift.String?, style: UIKit.UIUserInterfaceStyle)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupTitleView(mastheadProvider: any PRAPI.MastheadProvider, title: Swift.String?, subtitle: Swift.String?, style: UIKit.UIUserInterfaceStyle, completion: PRThumbnail.PRThumbnailHandler? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupTitleView(mastheadProvider: any PRAPI.MastheadProvider, title: Swift.String?, subtitle: Swift.String?, completion: PRThumbnail.PRThumbnailHandler? = nil)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupTitleView(mastheadProvider: any PRAPI.MastheadProvider)
}
extension PRUI.PROrder {
  @objc dynamic public var requireSubscription: Swift.Bool {
    @objc get
  }
  @objc dynamic public var account: PRAPI.PRAccountItem? {
    @objc get
  }
  public var remainingCredits: (credit: Swift.Int, until: Foundation.Date?)? {
    get
  }
  public var isFreeToOrder: Swift.Bool {
    get
  }
  @objc dynamic public var shouldRequestPaymentInfo: Swift.Bool {
    @objc get
  }
  @objc dynamic public func askOrderConfirmation(options: PRUI.PROrderDeliveryOption, completion: PRUI.PROrderCompletion?) -> Swift.Bool
}
extension PRUI.NTFFeedDataSource : PRUI.PRRadioDataSource {
  @objc dynamic public var isPremiumAudioAvailable: Swift.Bool {
    @objc get
  }
  @objc dynamic public var currentArticle: (any PRAPI.NTFArticle)? {
    @objc get
    @objc set
  }
  @objc dynamic public func loadMoreToTheEnd() async
  @objc dynamic public func loadMoreAtTheBeginning() async
  @objc dynamic public func index(for item: any PRAPI.NTFArticle) -> Swift.Int
  @objc dynamic public func article(for index: Swift.Int) -> (any PRAPI.NTFArticle)?
  @objc dynamic public func article(id: Swift.String) -> (any PRAPI.NTFArticle)?
}
@objc extension PRUI.PRiphoneAppDelegate {
  @objc @discardableResult
  @_Concurrency.MainActor @preconcurrency dynamic public func openDeepLink(_ url: Foundation.URL) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class EmptyFeedCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor @preconcurrency final public var message: Swift.String {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var centerYOffset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency @objc override final public func updateAppearance()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class NTFBannersCell : PRUI.NTFCompactFlowCell {
  @objc @_Concurrency.MainActor @preconcurrency public static var height: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class TextFlowUIStyleSelectorVC : PRUI.UIStyleSelectorVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc deinit
}
extension UIKit.UIApplication : PRUI.UIStyleOserver {
  @available(swift, obsoleted: 1.0)
  @objc(registerUIStyleObserver) @_Concurrency.MainActor @preconcurrency dynamic public func _registerUIStyleObserver()
  @_Concurrency.MainActor @preconcurrency public func applyUIStyle()
}
extension PRUI.PRRadioVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func openArticle()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateBottomBarShowingEffect(_ showEffect: Swift.Bool)
}
extension PRUI.PRRadioVC : PRUIKit.NavigationBarAppearanceProvider {
}
extension PRUI.PRSourceItemCellList {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setupCell(item: any PRAPI.PRCatalogItem)
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class NTFCompactViewCommons : ObjectiveC.NSObject {
  @objc public static var secondaryTintColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var menuButtonIcon: UIKit.UIImage? {
    @objc get
  }
  @objc public static var bylineTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static var bodyTextColor: UIKit.UIColor {
    @objc get
  }
  @objc public static func dateStyle(date: Foundation.Date?) -> PRUIKit.PRDatePresentationStyle
  @objc public static func menuButton(handler: @escaping (PRUIKit.PRSwitchButton) -> ()) -> PRUIKit.PRSwitchButton
  @objc public static func bylineLabel() -> PRUIKit.UILabelHidable
  @objc public static func dateLabel() -> PRUIKit.UILabelHidable
  @objc override dynamic public init()
  @objc deinit
}
extension PRUI.VerticalTextFlowVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isEmpty: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var emptyFeedMessageCell: Swift.AnyClass {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var emptyFeedMessage: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var showEmptyFeedMessage: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var emptyFeedMessageCenterYOffset: CoreFoundation.CGFloat {
    @objc get
  }
}
@objc @objcMembers public class CatalogFilterPanelModel : ObjectiveC.NSObject {
  @objc final public let options: [PRAPI.CatalogNavigationSection]
  @objc public var variantIndexes: [Swift.String] {
    @objc get
  }
  @objc public var selectedVariant: (any PRAPI.CatalogNavigationVariant)?
  @objc public init(options: [PRAPI.CatalogNavigationSection])
  @objc public func variant(indexPath: Foundation.IndexPath) -> any PRAPI.CatalogNavigationVariant
  @objc deinit
}
extension PRUIKit.PRSafariVC : @retroactive PRUIKit.Reportable {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func report()
}
@objc extension WKYTPlayerView.YTPlayerView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func metadata(completion: ((Any?, (any Swift.Error)?) -> Swift.Void)?)
}
@objc extension PRUI.PRMyAccountMasterPanelVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var shouldShowPremiumTrialBanner: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func premiumBannerCell(for tableView: UIKit.UITableView, reuseId: Swift.String) -> UIKit.UITableViewCell
}
@objc extension PRUI.PROrderDelivery {
  @objc dynamic public func askUserForDownload() -> Swift.Bool
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isInSearchFlow: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isGlobalSearchPresented: Swift.Bool {
    @objc get
  }
}
extension UIKit.UIViewController : @retroactive PRUIKit.GlobalSearchSupportable {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func showGlobalSearch(text: Swift.String?) async -> UIKit.UIViewController?
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class ArticlePopoverContainerVC : UIKit.UIViewController, UIKit.UINavigationControllerDelegate {
  @objc(ArticlePopoverContentAppearanceType) public enum AppearanceType : Swift.Int {
    case automatic = 0
    case popover
    case fullScreen
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor @preconcurrency public static var presentedInstance: PRUI.ArticlePopoverContainerVC? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public class func containerStack(content: UIKit.UIViewController, appearanceType: PRUI.ArticlePopoverContainerVC.AppearanceType = .automatic) -> UIKit.UINavigationController
  @objc(dismissIfPresentedAnimated:completion:) @_Concurrency.MainActor @preconcurrency final public class func dismissIfPresented(animated: Swift.Bool, completion: (() -> ())?)
  @_Concurrency.MainActor @preconcurrency @objc override final public var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(content: UIKit.UIViewController, appearanceType: PRUI.ArticlePopoverContainerVC.AppearanceType = .automatic)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc final public func navigationControllerSupportedInterfaceOrientations(_ navigationController: UIKit.UINavigationController) -> UIKit.UIInterfaceOrientationMask
  @_Concurrency.MainActor @preconcurrency @objc final public func navigationControllerPreferredInterfaceOrientationForPresentation(_ navigationController: UIKit.UINavigationController) -> UIKit.UIInterfaceOrientation
  @_Concurrency.MainActor @preconcurrency @objc override final public var shouldPresentTanslationHUD: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var active: UIKit.UIViewController {
    @objc get
  }
  @objc deinit
}
extension UIKit.UINavigationController : PRUI.ViewRefreshable {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func refreshView()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PressReaderState : ObjectiveC.NSObject {
  public static let instance: PRUI.PressReaderState
  final public let isActivated: Combine.CurrentValueSubject<Swift.Bool, any Swift.Error>
  final public let isCatalogLoaded: Combine.CurrentValueSubject<Swift.Bool, any Swift.Error>
  @objc deinit
}
@objc extension PRUI.PRSourceItemCell {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateActionState()
}
@objc @_Concurrency.MainActor @preconcurrency public class PRVerticalBookmarksVC : PRUI.UniversalLayoutFeedVC, PRUI.PRBookmarkListDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public class func bookmarksVC(profileId: Swift.String) -> PRUI.PRVerticalBookmarksVC
  @objc @_Concurrency.MainActor @preconcurrency public class func bookmarksVC(profileId: Swift.String, collectionModel: PRAPI.PRCollectionsModel<PRAPI.NTFCollectionItem>?, collection: PRAPI.NTFCollectionItem?) -> PRUI.PRVerticalBookmarksVC
  @objc @_Concurrency.MainActor @preconcurrency public class func bookmarksVC(profileId: Swift.String, dataSource: PRUI.NTFBookmarksDataSource) -> PRUI.PRVerticalBookmarksVC
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(profileId: Swift.String, collectionModel: PRAPI.PRCollectionsModel<PRAPI.NTFCollectionItem>?, collection: PRAPI.NTFCollectionItem?)
  @objc @_Concurrency.MainActor @preconcurrency public init(profileId: Swift.String, dataSource: PRUI.NTFBookmarksDataSource)
  @objc @_Concurrency.MainActor @preconcurrency final public let profileId: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public var bookmarksDataSource: PRUI.NTFBookmarksDataSource {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency override public var firstRowTopInset: Foundation.NSNumber {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var emptyFeedMessageCell: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var articleCompactViewOptions: PRUI.NTFArticleCompactViewOption {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setupDefaultValues()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func registerCells()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var searchItemStyle: PRUIKit.PRNavigationBarSearchItemStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var navigationBarLeftBarButtonItems: [UIKit.UIBarButtonItem]? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc public func bookmarkListVC(_ vc: PRUI.PRBookmarkListVC, didSelectCollection collection: PRAPI.NTFCollectionItem)
  @_Concurrency.MainActor @preconcurrency @objc public func bookmarkListVCDidReceiveDismiss(_ vc: PRUI.PRBookmarkListVC)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func refreshContent(with reason: PRUI.NTFFeedDataSourceRefreshReason)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isAppMenuAllowed: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc final public class PRIssuesGroup : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let data: [PRAPI.PRTitleItemExemplar]
  @objc public init(name: Swift.String, data: [PRAPI.PRTitleItemExemplar])
  @objc deinit
}
@objc extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func shouldRestoreIAP() -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func restoreIAP()
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency final public class BookCoverPlaceholderView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency final public class func shapshot(color: UIKit.UIColor, size: CoreFoundation.CGSize) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol TranslateHUDPresenter : ObjectiveC.NSObjectProtocol {
  @objc var shouldPresentTanslationHUD: Swift.Bool { get }
}
@objc extension UIKit.UIViewController : PRUI.TranslateHUDPresenter {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var shouldPresentTanslationHUD: Swift.Bool {
    @objc get
  }
}
public protocol Downloaded {
  typealias Observer = Swift.AnyObject
  var items: [any PRAPI.PRCatalogItem] { get }
  func delete(_ item: any PRAPI.PRCatalogItem)
  func deleteAll()
  func observe(_ callback: @escaping () -> ()) -> Self.Observer
}
@objc @_inheritsConvenienceInitializers final public class CommandShowATTPermissionRequest : PRCommands.PRCommand {
  @objc override public static var defaultCommandName: PRCommands.PRCommandName {
    @objc get
  }
  @objc override final public class var isEnabled: Swift.Bool {
    @objc get
  }
  @objc public static func execute(completion: (() -> Swift.Void)?)
  @objc override final public func invoke(withParameters parameters: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRUI.PressReader : PRProtocols.Singleton {
  @_Concurrency.MainActor @preconcurrency @objc public static func instance() -> Self
  @_Concurrency.MainActor @preconcurrency @objc public static func hasInstance() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public static func dismiss()
}
@objc public protocol CatalogFilterCellDelegate {
  @objc func catalogFilterCell(_ cell: PRUI.CatalogFilterCell, action: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class CatalogFilterCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor @preconcurrency final public var viewModel: PRUI.CatalogFilterViewModel {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any PRUI.CatalogFilterCellDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @objc deinit
}
extension PRUI.PRFeedbackController {
  @_Concurrency.MainActor @preconcurrency public static func presentLogsAttachedFeedbackComposer(parent: UIKit.UIViewController? = nil, subject: Swift.String? = nil, recipients: [Swift.String]? = nil)
  @available(swift, obsoleted: 1.0)
  @objc(presentLogsAttachedFeedbackComposer) @_Concurrency.MainActor @preconcurrency public static func _presentLogsAttachedFeedbackComposer()
}
extension UIKit.UINavigationItem {
  @available(swift, obsoleted: 1.0)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupAppLogoTitle(style: UIKit.UIUserInterfaceStyle, completion: PRSyntacticSugar.PRSimpleBlock?)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupAppLogoTitle(title: Swift.String? = nil, style: UIKit.UIUserInterfaceStyle, isLarge: Swift.Bool = false, completion: PRSyntacticSugar.PRSimpleBlock? = nil)
}
@objc @_inheritsConvenienceInitializers final public class CollectionViewCellAccessories : ObjectiveC.NSObject {
  @objc final public class func pileImage(size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat, colour: UIKit.UIColor) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
public typealias PaymentInfoBlock = (PRUI.PROrderDeliveryResult, [Swift.String], PRAPI.PRConsumableBundle?) -> ()
extension PRAPI.PRTitleItemExemplar {
  public static let delivery: PRSyntacticSugar.ObjectAssociationProxy<PRUI.PROrderDelivery>
  public static let paymentInfoDelivery: PRSyntacticSugar.ObjectAssociationProxy<PRUI.PROrderDelivery>
  @objc dynamic public func requestPaymentInfo(subscription: PRAPI.PRSubscription, completion: @escaping PRUI.PaymentInfoBlock)
  @objc dynamic public func order(subscription: PRAPI.PRSubscription, options: PRUI.PROrderDeliveryOption, orderDescription: [Swift.String : Any]?, completion: PRUI.DeliveryCompletionBlock?)
  @objc dynamic public func order(subscription: PRAPI.PRSubscription, options: PRUI.PROrderDeliveryOption, usePremiumProduct: Swift.Bool, orderDescription: [Swift.String : Any]?, completion: PRUI.DeliveryCompletionBlock?)
  @objc dynamic public func order(subscription: PRAPI.PRSubscription, options: PRUI.PROrderDeliveryOption, purchaseProduct: Swift.String?, orderDescription: [Swift.String : Any]?, completion: PRUI.DeliveryCompletionBlock?, cancellation: PRUI.CancellationBlock?, purchaseInfoHandler: ((PRUI.PROrderDeliveryResult, [Swift.String]) -> ())?)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class PRSlidePresentDismissActor : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  @objc @_Concurrency.MainActor @preconcurrency public static let pushActor: PRUI.PRSlidePresentDismissActor
  @objc @_Concurrency.MainActor @preconcurrency public static let popActor: PRUI.PRSlidePresentDismissActor
  @_Concurrency.MainActor @preconcurrency @objc final public func transitionDuration(using transitionContext: (any UIKit.UIViewControllerContextTransitioning)?) -> Foundation.TimeInterval
  @_Concurrency.MainActor @preconcurrency @objc final public func animateTransition(using transitionContext: any UIKit.UIViewControllerContextTransitioning)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MySubscriptionsVCProvider : ObjectiveC.NSObject {
  @objc public func getMySubscriptionsVC(withAccount account: PRAPI.PRAccountItem) -> UIKit.UIViewController
  @objc override dynamic public init()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public class MySubscriptionsVC : PRUIKit.SwiftVC<PRUI.MySubscriptionsView, PRUI.MySubscriptionsModel>, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate, PRAPI.LoadableModelObserver {
  @_Concurrency.MainActor @preconcurrency public init(withAccount account: PRAPI.PRAccountItem)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency public func didSelectManageSubscription()
  @_Concurrency.MainActor @preconcurrency public func didSelectOpenTitle(cid: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func didSwitchAutodeliveryOn(isOn: Swift.Bool, cid: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func modelDidFinishLoading(model: any PRAPI.ObservableModel, result: PRUtils.VoidResult)
  @objc deinit
}
extension Swift.String {
  public func telephoneString() -> Swift.String
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isOffline: Swift.Bool {
    @objc get
  }
}
@objc extension Foundation.NSAttributedString {
  @objc dynamic public func maxLineNumbers(width: CoreFoundation.CGFloat, height: CoreFoundation.CGFloat = CGFloat(MAXFLOAT)) -> Swift.Int
  @objc dynamic public func lastTextLineRange(width: CoreFoundation.CGFloat, maxLineNumbers: Swift.Int) -> Foundation.NSRange
}
extension PRUI.NTFSmartArticleDataItem : PRAPI.NTFItem {
}
extension PRUI.NTFSmartArticleDataItem : PRAPI.NTFActionConfig {
  @objc dynamic public var generalActionConfig: [Swift.AnyHashable : Any] {
    @objc get
  }
  @objc dynamic public var articleActionConfig: [Swift.AnyHashable : Any] {
    @objc get
  }
}
extension PRUI.NTFSmartArticleDataItem : PRAPI.FlowArticle {
}
@objc extension PRUI.PRSourceItemCell {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func currentItemState() -> PRAPI.PRTitleItemExemplarState
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateDownloadState(notification: Foundation.Notification)
}
@_inheritsConvenienceInitializers @objc final public class Narrow3CFeedLayoutItem : PRUI.AbstractFeedLayoutItem {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CommandShowEmailSignIn : PRUI.PROnlineCommand {
  @objc public class func execute(presenter: UIKit.UIViewController?, options: PRUI.PREmailSignInOptions?, uiPreference: PRUI.SignInUIPreferences)
  @objc override dynamic public class func execute(withParameters parameters: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class VotingBarCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor @preconcurrency final public let voteView: PRUI.PRVotingBar
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
@objc final public class MySubscriptionsModel : ObjectiveC.NSObject, PRAPI.ObservableModel {
  final public var isRequiredSignIn: Swift.Bool {
    get
  }
  final public var isAppStoreProductAvailable: Swift.Bool {
    get
  }
  final public var isSubscriptionForBundle: Swift.Bool {
    get
  }
  final public var account: PRAPI.PRAccountItem {
    get
  }
  final public var activeSubscriptionBundles: [PRAPI.PRSubscriptionBundle] {
    get
  }
  @objc public init(account: PRAPI.PRAccountItem)
  final public func updateSources()
  final public func restorePurchase()
  @objc deinit
}
extension PRUI.PRSourceCategoriesCollectionVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupAccessibility()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupAccessibility(view: UIKit.UICollectionViewCell, filter: any PRAPI.CatalogNavigation)
}
@objc extension PRUI.PROrderDelivery {
  @objc dynamic public func showRegistrationAlert(productIDs: Swift.Set<Swift.String>, descriptions: ObjectiveC.NSObject, info: [Swift.AnyHashable : Any])
}
@objc @_inheritsConvenienceInitializers final public class PartnerBannerViewAdapter : ObjectiveC.NSObject {
  public static func isEnabled(area: PRConfiguration.CoBrandingConfig.Area?) -> Swift.Bool
  public static func viewController(area: PRConfiguration.CoBrandingConfig.Area?, horizontalSize: SwiftUICore.UserInterfaceSizeClass? = nil) -> UIKit.UIViewController?
  @objc override dynamic public init()
  @objc deinit
}
extension PRUI.PartnerBannerViewAdapter {
  public static var stackViewSpacing: CoreFoundation.CGFloat {
    get
  }
  public static func bannerHeight(area: PRConfiguration.CoBrandingConfig.Area?, horizontalSize: UIKit.UIUserInterfaceSizeClass) -> CoreFoundation.CGFloat
  public static func stackView(area: PRConfiguration.CoBrandingConfig.Area?, horizontalSize: SwiftUICore.UserInterfaceSizeClass? = nil) -> UIKit.UIStackView
}
@objc @_inheritsConvenienceInitializers final public class CommandShowOnboarding : PRUI.PROnlineCommand {
  public static var initialOnboardingVC: UIKit.UIViewController {
    get
  }
  @objc final public class var isGetStartedViewEnabled: Swift.Bool {
    @objc get
  }
  @objc final public class var isRegistrationIntroEnabled: Swift.Bool {
    @objc get
  }
  @objc final public class var isIntroEnabled: Swift.Bool {
    @objc get
  }
  @objc override final public class var isEnabled: Swift.Bool {
    @objc get
  }
  @objc override final public class func execute(withParameters: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRUI.PRPubHubDataSource {
  @objc dynamic public func toggleBanner(type: PRConfiguration.PRBannerType)
  @objc dynamic public func showBanner(type: PRConfiguration.PRBannerType)
  @objc dynamic public func hideBanner(type: PRConfiguration.PRBannerType)
}
@objc extension UIKit.UICollectionView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func scrollToTop(_ animated: Swift.Bool)
}
extension PRUI.PRPubHubDataSource {
  @objc dynamic public func listenSection(scheme: PRAPI.CatalogSectionScheme) -> PRAPI.PRCatalogSection?
}
extension PRUI.PRPubHubDataSource : PRAPI.LoadableModelObserver {
  public func modelDidFinishLoading(model: any PRAPI.ObservableModel, result: PRUtils.VoidResult)
}
@objc extension UIKit.UISplitViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func refreshPrimaryView()
}
@_hasMissingDesignatedInitializers final public class KeyboardLayoutGuide {
  final public let topGuide: UIKit.UILayoutGuide
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class NavigationBarTitleView : UIKit.UIStackView {
  @objc @_Concurrency.MainActor @preconcurrency public init(title: Swift.String?, subtitle: Swift.String?)
  @objc deinit
}
public protocol PurchaseProductProvider {
  var selectedProduct: PRAPI.PRProduct? { get }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class PREmailSignInOptions : ObjectiveC.NSObject {
  @objc final public var userName: Swift.String
  @objc final public var password: Swift.String
  @objc final public var serviceName: Swift.String?
  @objc final public var linkToCurrentAccount: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor @objc final public class CommandOpenBookCatalog : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor final public class func execute(title: Swift.String = PRLocalizedString("PR.iPad.Books"), animated: Swift.Bool = true)
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
@objc extension PRUI.PRAttachmetsContainerView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupBarStyle()
}
extension PRUI.PRPubHubDataSource {
  @objc dynamic public func observeContentCards()
}
extension PRUI.PRiphoneAppDelegate {
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func launchCommand(_ command: Swift.String, parameters: [Swift.String : Any]? = nil, completion: ((Swift.Bool) -> ())? = nil) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func launchCommand(_ command: PRAccessibility.PRLaunchCommand, parameters: [Swift.String : Any]? = nil, completion: ((Swift.Bool) -> ())? = nil) -> Swift.Bool
}
@objc extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func openOrderView(cid: Swift.String?, date: Foundation.Date?, preferableServiceName: Swift.String?, asSeparatePanel: Swift.Bool, forceDownload: Swift.Bool) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers final public class FeedArticleAccessControlActor : ObjectiveC.NSObject {
  @objc final public class func performAction(_ actionType: PRUI.ActionType, article: (any PRAPI.NTFArticle)?, action: @escaping () -> ())
  @objc final public class func performAction(_ actionType: PRUI.ActionType, article: (any PRAPI.NTFArticle)?, signInAction: (() -> ())?, action: @escaping () -> ())
  @objc final public func performAction(_ actionType: PRUI.ActionType, article: (any PRAPI.NTFArticle)?, action: @escaping () -> ())
  @objc final public func performAction(_ actionType: PRUI.ActionType, article: (any PRAPI.NTFArticle)?, signInAction: (() -> ())?, action: @escaping () -> ())
  @objc final public func purchaseSubscription(article: PRAPI.NTFArticleItem, completion: @escaping (Swift.Bool) -> ())
  @objc final public func canPurchaseSubscription(article: PRAPI.NTFArticleItem) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRUI.PRSplashScreenVC : PRAPI.SplashScreenAnalyticsProvider {
  @objc @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency dynamic public func _trackSplashScreen()
}
public struct BookContentActionAccessActor {
  public typealias Item = PRCatalogModel.BookContent
}
extension PRUI.NTFFeedDataSource {
  @objc override dynamic public func type(forItem item: Any) -> PRAPI.NTFDataItemType
  @objc dynamic public func registerSubscriptionObserver()
}
@objc final public class URLActivityItem : PRUI.PRActivityItem {
  @objc public init(url: Foundation.URL, urlPreview: UIKit.UIImage?, urlTitle: Swift.String?)
  @objc override final public func item(forActivityType activityType: UIKit.UIActivity.ActivityType) -> Any?
  @objc override final public func activityViewControllerLinkMetadata(_ activityViewController: UIKit.UIActivityViewController) -> LinkPresentation.LPLinkMetadata?
  @objc deinit
}
@objc extension PRUI.ModalVideoPlayerVC : PRAPI.RichMediaAnalyticsProvider {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var mediaType: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var issue: (any PRAPI.IssueAnalyticsProvider)? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var mediaTitle: Swift.String? {
    @objc get
  }
  @objc @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency dynamic public func _trackRichMedia(action: PRAnalytics.RMTAction)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class BannerReadingVC : PRUI.ReadingViewController, PRAds.AdDataSourceDelegate {
  @_Concurrency.MainActor @preconcurrency final public var shouldDisplayFirstPageBanner: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var shouldDisplayLastPageBanner: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func numberOfPageViews() -> Swift.UInt
  @_Concurrency.MainActor @preconcurrency @objc override final public func pageViewIndex(forPage page: Swift.UInt, doubleViewMode: Swift.Bool) -> Swift.UInt
  @_Concurrency.MainActor @preconcurrency @objc override final public func pageViewSubIndex(forPage page: Swift.UInt, doubleViewMode: Swift.Bool) -> Swift.UInt
  @_Concurrency.MainActor @preconcurrency @objc override final public func pageNumber(forPageViewIndex pageIndex: Swift.UInt, subIndex: Swift.UInt, doubleViewMode: Swift.Bool) -> Swift.UInt
  @_Concurrency.MainActor @preconcurrency @objc override final public func pdfScrollViewWithCurrentItem() -> PRUI.PRPDFScrollView
  @_Concurrency.MainActor @preconcurrency @objc override final public func configurePageView(_ pageView: PRUI.PRPDFScrollView, for index: Swift.UInt, scale: CoreFoundation.CGFloat, offset: CoreFoundation.CGPoint)
  @_Concurrency.MainActor @preconcurrency @objc final public func adChangeHandler(_ ad: PRAds.AdBannerPresentation)
  @_Concurrency.MainActor @preconcurrency @objc final public func presentEmbedableAds(_ ads: [PRAds.AdBannerPresentation]?)
  @_Concurrency.MainActor @preconcurrency @objc final public func presentInterstitialAds(_ ads: [PRAds.AdBannerPresentation]?)
  @_Concurrency.MainActor @preconcurrency @objc final public func presentFixedAds(_ ads: [PRAds.AdBannerPresentation]?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(item: any PRAPI.ReadingViewItem)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var popoverPresentationDelegate: PRUI.PopoverPresentationController? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var popoverContainer: UIKit.UIViewController? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func popoverContentSize() -> CoreFoundation.CGSize
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func popoverContentSize(height: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func signInPopoverContentSize() -> CoreFoundation.CGSize
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func isInPopoverWithArrow() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(PRPopoverPresentationController) @_Concurrency.MainActor @preconcurrency final public class PopoverPresentationController : ObjectiveC.NSObject, UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
  @_Concurrency.MainActor @preconcurrency @objc final public func popoverPresentationController(_ popoverPresentationController: UIKit.UIPopoverPresentationController, willRepositionPopoverTo rect: Swift.UnsafeMutablePointer<CoreFoundation.CGRect>, in view: Swift.AutoreleasingUnsafeMutablePointer<UIKit.UIView>)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @objc deinit
}
extension PRUI.PRGiftIssuePromoBlockVC : PRAnalytics.GiftedIssueAnalyticsProvider {
  @available(swift, obsoleted: 1.0)
  @objc(trackGiftedIssueAdget) @_Concurrency.MainActor @preconcurrency dynamic public func _trackGiftedIssueAdget()
  @available(swift, obsoleted: 1.0)
  @objc(trackGiftedIssueVideoPlayed) @_Concurrency.MainActor @preconcurrency dynamic public func _trackGiftedIssueVideoPlayed()
  @available(swift, obsoleted: 1.0)
  @objc(updateUserEngagementAnalyticsParameters) @_Concurrency.MainActor @preconcurrency dynamic public func _updateUserEngagementAnalyticsParameters()
}
@objc @_Concurrency.MainActor @preconcurrency final public class FilteredCatalogVC : PRUI.PRSourcesVC {
  @_Concurrency.MainActor @preconcurrency @objc override final public var filtersVC: PRUI.CatalogFiltersCollectionVC? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public init(scope: PRCatalogModel.CatalogEntity)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override final public func completeDataLoading(_ source: Any)
  @_Concurrency.MainActor @preconcurrency @objc override final public var catalogPath: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum ActionType : Swift.Int {
  case share
  case bookmark
  case listen
  case print
  case translate
  case read
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol HotSpotNotFoundViewDelegate : AnyObject {
  func close()
  func contentSizeDidChange(_ size: CoreFoundation.CGSize)
}
@objc @_Concurrency.MainActor @preconcurrency final public class HotSpotNotFoundView : PRUIKit.BrandGradientView {
  @_Concurrency.MainActor @preconcurrency public init(delegate: any PRUI.HotSpotNotFoundViewDelegate)
  @objc deinit
}
public enum DownloadState {
  case stop
  case progress
  case pause
  case ready
  public static func == (a: PRUI.DownloadState, b: PRUI.DownloadState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol Download {
  typealias Progress = Swift.Int
  typealias Observer = Swift.AnyObject
  typealias Callback = (PRUI.DownloadState, Self.Progress, (any Swift.Error)?) -> Swift.Void
  var state: PRUI.DownloadState { get }
  var progress: Self.Progress { get }
  var error: (any Swift.Error)? { get }
  func start()
  func pause()
  func cancel()
  func observe(_ callback: @escaping Self.Callback) -> Self.Observer
}
@objc public protocol ItemSelectionDelegate {
  @objc func viewController(_ vc: UIKit.UIViewController, selectItem item: Any?)
}
extension UIKit.UIImage {
  @objc(bundledTemplateImageNamed:) public static func bundledTemplate(name: Swift.String) -> Self?
  @objc(bundledImageNamed:selected:xl:) public static func bundledImage(name: Foundation.NSString, selected: Swift.Bool, xl: Swift.Bool) -> UIKit.UIImage?
  @available(swift, obsoleted: 1.0)
  @objc public static func bundledImageNamed(_ name: Swift.String) -> UIKit.UIImage?
  @available(*, unavailable)
  @objc public static func bundledImageNamed(_ name: Swift.String, compatibleWithTraitCollection: UIKit.UITraitCollection?) -> UIKit.UIImage?
  convenience public init?(bundledWithName name: Swift.String)
  convenience public init?(name: Swift.String, compatibleWith traitCollection: UIKit.UITraitCollection?)
}
extension SwiftUICore.Image {
  public init?(bundledWithName name: Swift.String)
}
extension PRUI.PRSourcesVC {
  @_Concurrency.MainActor @preconcurrency public var coBrandingArea: PRConfiguration.CoBrandingConfig.Area? {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isCoBrandingEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var partnerBannerHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func partnerBannerStackView() -> UIKit.UIStackView
}
extension PRAPI.BannerAnalyticsProvider {
  public var bannerContext: PRAnalytics.PRAnalyticsBannerContext {
    get
  }
}
@objc extension PRUI.PREmbedablePubHubVC {
  @_Concurrency.MainActor @preconcurrency @objc convenience override dynamic public init(sourceList: PRAPI.PRSourceList)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sectionPresentationInfo(_ section: PRAPI.PRCatalogSection) -> PRUI.PubHubSectionPresentationInfo
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func cellPresentationStyle(section: PRAPI.PRCatalogSection) -> PRUI.PRSourceItemCellPresentationStyle
  @nonobjc @_Concurrency.MainActor @preconcurrency public func setupSectionCell<T>(_ cell: UIKit.UICollectionViewCell, section: PRAPI.PRCatalogSection, insets: UIKit.UIEdgeInsets = .zero, controller: () -> T) where T : UIKit.UIViewController
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupListenHighlightsSectionCell(_ cell: UIKit.UICollectionViewCell, section: PRAPI.PRCatalogSection)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupFilterSectionCell(_ cell: UIKit.UICollectionViewCell, section: PRAPI.PRCatalogSection)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupCoBrandingSectionCell(_ cell: UIKit.UICollectionViewCell, section: PRAPI.PRCatalogSection)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sourceVC(section: PRAPI.PRCatalogSection) -> PRUI.PRSourcesVC
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func bannerHeight(width: CoreFoundation.CGFloat, section: PRAPI.PRCatalogSection) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func _registerReusableCells()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func pushFullCatalogVC()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func headerViewOptions(sectionOptions: PRAPI.PRCatalogSectionOption, section: Swift.Int) -> PRUI.PRSectionHeaderViewOption
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var shouldDiscard: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class CommandOpenArticleParameters : ObjectiveC.NSObject {
  @objc final public var parentArticle: PRAPI.NTFArticleItem?
  @objc final public var textFlowType: PRUI.NTFTextFlowType
  @objc weak final public var presenter: UIKit.UIViewController?
  @objc final public var containerOptions: PRUI.PRArticleContainerOption
  @objc final public var highlightedPhrases: [Swift.String]?
  @objc final public var openHomeFeed: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRUIKit.PRCommandMenuItem {
  @objc public static let titleKey: Swift.String
  @objc public static func shareMenuItem(parameters: [Swift.String : Any]? = nil, context: Swift.String? = nil) -> PRUIKit.PRMenuItem?
  @objc public static func shareMenuItem(pageNumberProvider: @escaping () -> Swift.Int, pagesProvider: @escaping () -> Swift.Set<Swift.Int>) -> PRUIKit.PRMenuItem?
  @objc public static func listenMenuItem(parameters: [Swift.String : Any]? = nil, context: Swift.String? = nil) -> PRUIKit.PRCommandMenuItem
}
@_inheritsConvenienceInitializers @objc final public class CommandOpenInterestsFeed : ObjectiveC.NSObject {
  @objc final public class func execute(interest: PRAPI.Interest)
  @objc final public class func execute(interest: PRAPI.Interest, presenter: UIKit.UINavigationController?)
  @objc final public class func execute(interest: PRAPI.Interest, presenter: UIKit.UINavigationController?, animated: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class UIStyleSelectorVC : PRUI.PRSelectionPanelVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@available(*, unavailable)
@objc extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func _application(_ application: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity, restorationHandler: @escaping ([any UIKit.UIUserActivityRestoring]?) -> Swift.Void) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func _application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
}
@objc extension PRUI.PRDebugSettingsDetailsPanelVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupLowCreditAlertCell(_ cell: UIKit.UITableViewCell)
}
@objc @_inheritsConvenienceInitializers public class AbstractFeedLayoutItem : ObjectiveC.NSObject {
  @objc public var itemsCount: Swift.Int {
    @objc get
  }
  @objc public var itemIDs: [CoreData.NSManagedObjectID]? {
    @objc get
    @objc set
  }
  @objc public var context: CoreData.NSManagedObjectContext? {
    @objc get
    @objc set
  }
  @objc public var items: [any PRAPI.NTFItem] {
    @objc get
    @objc set
  }
  @objc required override dynamic public init()
  public func items(context: CoreData.NSManagedObjectContext?) -> [any PRAPI.NTFItem]
  @objc deinit
}
extension PRUI.PRAppPanelsManager : PRAPI.AppUIReady {
  @objc dynamic public func getReady() -> PRPromiseKit.Promise
  @objc dynamic public func updateFirstPanelWhenReady() async
  @objc dynamic public func getAppUIReady() -> PRPromiseKit.Promise
}
@objc extension PRUI.PROrderInfoBarView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func update()
}
extension Foundation.Bundle {
  @objc public static var UI: Foundation.Bundle {
    @objc get
  }
  @objc dynamic public func registerCustomFonts(directory path: Swift.String = "Fonts")
  @available(swift, obsoleted: 1.0)
  @objc(registerCustomFonts) dynamic public func _registerCustomFonts()
}
extension PRUI.ReadingViewController : PRUIKit.NavigationBarAppearanceProvider {
  @_Concurrency.MainActor @preconcurrency public var standartNavigatioBarAppearanceType: UIKit.UINavigationBarAppearance.BackgroundType {
    get
  }
}
@objc @objcMembers final public class PubHubSectionPresentationInfo : ObjectiveC.NSObject {
  @objc final public let backgroundColor: UIKit.UIColor?
  @objc final public let headerBackgroundColor: UIKit.UIColor?
  @objc final public let height: CoreFoundation.CGFloat
  @objc public init(backgroundColor: UIKit.UIColor? = nil, headerBackgroundColor: UIKit.UIColor? = nil, height: CoreFoundation.CGFloat = 0)
  @objc deinit
}
extension PRUI.CustomStyleableTextFlowVC : PRUIKit.NavigationBarAppearanceProvider {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var scrollEdgeNavigatioBarAppearanceType: UIKit.UINavigationBarAppearance.BackgroundType {
    @objc get
  }
}
@objc extension PRUI.CustomStyleableTextFlowVC : PRUI.TextFlowUIStyleOserver {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupTextFlowUIStyle()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func resetTextFlowUIStyle()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func applyUIStyle()
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class CatalogFilterViewModel : ObjectiveC.NSObject, Foundation.ObservableObject {
  @objc public static let defaultFont: UIKit.UIFont
  @objc public static var recommendedSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc final public class func iconPadding(filterType: PRAPI.CatalogNavigationType) -> CoreFoundation.CGFloat
  @objc final public class func contentInset(filterType: PRAPI.CatalogNavigationType) -> UIKit.NSDirectionalEdgeInsets
  @objc final public class func iconWidth(filterType: PRAPI.CatalogNavigationType) -> CoreFoundation.CGFloat
  final public var model: (any PRUI.CatalogFilterModel)? {
    get
    set
  }
  @objc final public var isTitleUppercased: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var iconSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc final public var title: Swift.String {
    @objc get
  }
  @objc final public var numberOfLines: Swift.Int {
    @objc get
  }
  @objc final public var icon: UIKit.UIImage? {
    get
  }
  @objc final public var iconPadding: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var contentInset: UIKit.NSDirectionalEdgeInsets {
    @objc get
  }
  @objc @Combine.Published @_projectedValueProperty($font) final public var font: UIKit.UIFont {
    @objc get
    @objc @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $font: Combine.Published<UIKit.UIFont>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc @Combine.Published @_projectedValueProperty($itemSize) final public var itemSize: CoreFoundation.CGSize {
    @objc get
    @objc @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $itemSize: Combine.Published<CoreFoundation.CGSize>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc final public var action: (() -> ())?
  @objc override dynamic public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@objc public enum PRAlertActionType : Swift.Int {
  case cancel
  case cancelRegular
  case ok
  case no
  case yes
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension UIKit.UIAlertController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addAction(_ actionType: PRUI.PRAlertActionType, actionHandler: ((UIKit.UIAlertAction) -> ())? = nil)
}
@objc extension PRUI.PRBannersHubVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public class var bannersHub: PRUI.PRBannersHubVC {
    @objc get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class BESettingsMasterPanelVC : PRUI.PRSettingsMasterPanelVC, PRUI.PRAccountInfoCellDelegate, UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc @_Concurrency.MainActor @preconcurrency final public var menuItems: [PRUIKit.PRMenuItem]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var initialIndexPath: Foundation.IndexPath {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableView.Style)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency final public func imageForRow(at indexPath: Foundation.IndexPath) -> UIKit.UIImage?
  @_Concurrency.MainActor @preconcurrency @objc override final public func titleForRow(at indexPath: Foundation.IndexPath) -> Swift.String
  @_Concurrency.MainActor @preconcurrency @objc override final public func settingsDetailsPanelClass(at indexPath: Foundation.IndexPath) -> Swift.AnyClass?
  @_Concurrency.MainActor @preconcurrency @objc override final public func shouldPresentDisclosureIndicatorForCell(at indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, titleForFooterInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override final public func accountDidAuthorizeNotification(_ notification: Foundation.Notification!)
  @_Concurrency.MainActor @preconcurrency @objc override final public func accountDidDeauthorizeNotification(_ notification: Foundation.Notification!)
  @_Concurrency.MainActor @preconcurrency @objc final public func editAccountPicture(_ sourceView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency final public func presentImagePickerForSourceType(_ sourceType: UIKit.UIImagePickerController.SourceType, sourceView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc final public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor @preconcurrency @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class PRSectionHeaderViewModel : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var title: Swift.String
  @objc public var prompt: Swift.String?
  @objc public var subtitle: Swift.String?
  @objc public var options: PRUI.PRSectionHeaderViewOption
  @objc override convenience dynamic public init()
  @objc public init(title: Swift.String = "", prompt: Swift.String? = nil, subtitle: Swift.String? = nil, options: PRUI.PRSectionHeaderViewOption = .showSeeAllButton)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class NewsChannelsView : PRUIKit.SwiftView {
  @_Concurrency.MainActor @preconcurrency public var delegate: (any UIKit.UITableViewDataSource & UIKit.UITableViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var presentationStyle: UIKit.UIModalPresentationStyle {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var table: UIKit.UITableView {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func deselect(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func tableCell(forRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency public func tableSectionHeaderView(title: Swift.String) -> PRUIKit.SimpleTitleHeaderFooterView
  @objc deinit
}
@objc extension PRUIKit.PRMenuItem {
  @objc public static func editInterestsMenuItem() -> PRUIKit.PRMenuItem?
}
extension PRUIKit.PRUINavigationController : @retroactive UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, willShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
}
extension PRAPI.CatalogBanner : @retroactive PRAnalytics.AnalyticsProvider {
}
extension PRAPI.CatalogBanner : @retroactive PRAPI.BannerAnalyticsProvider {
  final public var bannerType: PRAnalytics.PRAnalyticsBannerType {
    get
  }
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor @objc final public class CommandNavigateBooks : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor final public class func execute(parameters: [Swift.String : Any]) async
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class AutoTranslateSettingsVC : PRUI.PRSettingsDetailsPanelVC, PRAPI.AutoTranslationPromtAnalyticsProvider {
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override final public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor @preconcurrency @objc override final public var navigationBarRightBarButtonItems: [UIKit.UIBarButtonItem]? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var navigationBarLeftBarButtonItems: [UIKit.UIBarButtonItem]? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var needBackButton: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class ArticleSearchVC : PRUI.UniversalLayoutFeedVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldHideBarsOnSwipe: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var emptyFeedMessage: Swift.String? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public init(dataSource: PRUI.NTFArticlesSearchDataSource)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setupTextFlowUIStyle()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func loadMoreItemsToTheEnd(completion: (() -> ())? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func presentDetailsVC(article item: any PRAPI.NTFArticle, completion: ((UIKit.UIViewController) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func refreshContent(with reason: PRUI.NTFFeedDataSourceRefreshReason)
  @objc deinit
}
@objc extension PRUI.ArticleSearchVC : PRAPI.ArticleSearchAnalyticsProvider {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var specificInfo: PRAnalytics.AnalyticsParameters {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var articlesCount: Swift.Int {
    @objc get
  }
}
@objc extension PRUI.PRPubHubVC {
  @objc @_Concurrency.MainActor @preconcurrency public static func catalogHub() -> Self
  @objc @_Concurrency.MainActor @preconcurrency public static func homeHub(scheme: PRUI.CatalogSchemeProvider = .home) -> Self
  @objc @_Concurrency.MainActor @preconcurrency public static func hub(hotspotManager: (any PRUI.PRHotspotStatusViewManagerProtocol)?) -> Self
  @objc @_Concurrency.MainActor @preconcurrency public static func hub(hotspotManager: (any PRUI.PRHotspotStatusViewManagerProtocol)?, dataSource: PRUI.PRPubHubDataSource) -> Self
}
@objc public protocol Tablable {
  @objc var tableView: UIKit.UITableView { get }
}
public protocol CatalogFilterModel {
  var title: Swift.String { get }
  var filterType: PRAPI.CatalogNavigationType { get }
  func getIcon(size: CoreFoundation.CGSize) async -> UIKit.UIImage?
}
@objc @objcMembers final public class CatalogFilterModelImp : ObjectiveC.NSObject, PRUI.CatalogFilterModel {
  @objc final public let filterType: PRAPI.CatalogNavigationType
  @objc final public let title: Swift.String
  @objc public init(filter: any PRAPI.CatalogNavigation)
  @objc final public func getIcon(size: CoreFoundation.CGSize) async -> UIKit.UIImage?
  @objc deinit
}
@objc extension PRUI.PRAccountVC : PRAPI.AccountAnalyticsProvider {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var accountViewType: PRAnalytics.PRAnalyticsAccountView {
    @objc get
  }
  @objc @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency dynamic public func _trackAccountDidAppear()
  @objc @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency dynamic public func _trackDeleteAccount(_ success: Swift.Bool)
}
public protocol PublicationDetailsViewDelegate : PRUI.PublicationDetailsTopViewDelegate {
  func detailsViewDidReceiveSubscribeTap(_ view: PRUI.PublicationDetailsView)
}
@_Concurrency.MainActor @preconcurrency final public class PublicationDetailsView : PRUIKit.BaseTabView<PRUI.PublicationDetailsTopView> {
  @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any PRUI.PublicationDetailsViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var showSubscribeButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var showFollowButton: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var subscribeToReadButtonKey: Swift.String {
    get
  }
  @_Concurrency.MainActor @preconcurrency override final public func embedView(_ view: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency override final public func setupSubviews()
  @_Concurrency.MainActor @preconcurrency final public func onScrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency final public func topViewActiveHeight() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency final public func adjustTopViewHeight(for scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency final public func showServicePickerView(from view: UIKit.UIView, selectedRow: Swift.Int, delegate: any PRUIKit.PRDropdownViewDelegate & UIKit.UIPickerViewDataSource & UIKit.UIPickerViewDelegate)
  @_Concurrency.MainActor @preconcurrency final public func closeServicePickerView(animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency final public func additionalBottomInset(subscribeButtonVisible: Swift.Bool) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class CommandShowPushNotificationsRequest : PRUI.PROnlineCommand {
  @objc override public static var defaultCommandName: PRCommands.PRCommandName {
    @objc get
  }
  @objc override final public class var isEnabled: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor public static func execute(forAutoDownload autoDownload: Swift.Bool) async
  @objc override final public func invoke(withParameters parameters: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
@objc final public class BookmarkMenuItem : PRUIKit.PRMenuItem {
  @objc convenience public init?(article: any PRAPI.NTFArticle)
  @objc convenience public init?(article: any PRAPI.NTFArticle, isStandalone: Swift.Bool)
  @objc convenience public init?(pageSet: PRSmart.PRSmartPageset?, dataSource: PRUI.NTFDataSource, pages: Swift.Set<Foundation.NSNumber>?, isActive: Swift.Bool, account: PRAPI.PRAccountItem?, discloseAction: ((PRUI.PRBookmarkEditVC, UIKit.UIViewController, PRUIKit.PRMenuItem) -> Swift.Void)? = nil)
  @objc public init?(isActive: Swift.Bool = false, account: PRAPI.PRAccountItem?, discloseAction: ((UIKit.UIViewController, PRUIKit.PRMenuItem) -> Swift.Void)? = nil)
  @objc deinit
}
@objc extension PRConfiguration.PRArticleConfig {
  @objc final public var shouldPresentArticleInPopover: Swift.Bool {
    @objc get
  }
}
@_Concurrency.MainActor @preconcurrency final public class GlobalSearchView : PRUIKit.BaseTabView<PRUI.GlobalSearchTopView> {
  @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any PRUI.GlobalSearchTopViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak final public var scrollUpdater: (any PRUI.ScrollUpdater)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency override final public func setupSubviews()
  @objc deinit
}
@objc extension PRUI.VerticalTextFlowArticleDetailsView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var style: UIKit.UIUserInterfaceStyle {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func reloadRelatedStories()
}
@objc public protocol UITextViewContainer : ObjectiveC.NSObjectProtocol {
  @objc func textViewWillDismissContainer(_ textView: PRUI.UITextViewWithLinks)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency final public class UITextViewWithLinks : UIKit.UITextView {
  @objc @_Concurrency.MainActor @preconcurrency weak final public var container: UIKit.UIViewController?
  @objc @_Concurrency.MainActor @preconcurrency final public var separator: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency final public var isSingleLine: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var links: [PRAPI.TextLink] {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var stubs: [Swift.String]? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var linkTextAttributes: [Foundation.NSAttributedString.Key : Any]! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect = .zero, textContainer: UIKit.NSTextContainer?)
  @objc deinit
}
extension PRUI.UITextViewWithLinks : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class CommandOpenBookDetails : PRCommands.PRCommand {
  @objc override final public class var defaultCommandName: PRCommands.PRCommandName {
    @objc get
  }
  @objc override final public func invoke(withParameters parameters: [Swift.AnyHashable : Any]?)
  @objc @_Concurrency.MainActor final public class func execute(bookId: Swift.String) async
  @objc @_Concurrency.MainActor final public class func execute(book: PRCatalogModel.Book, options: PRUI.PROrderOption = [])
  @objc @_Concurrency.MainActor final public class func execute(book: PRCatalogModel.Book, options: PRUI.PROrderOption = [], navigationController: UIKit.UINavigationController?)
  @objc @_Concurrency.MainActor final public class func execute(book: PRCatalogModel.Book, options: PRUI.PROrderOption = [], navigationController: UIKit.UINavigationController?, animated: Swift.Bool)
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class CommandManageInterests : PRUI.PROnlineValidator {
  @objc override final public class var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public class func execute(title: Swift.String? = nil)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class CommandManageFollowPublications : PRUI.PROnlineValidator, PRUI.PRExecutable {
  @objc final public class func execute()
  @objc override dynamic public init()
  @objc deinit
}
extension PRUIKit.PRUINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func update(viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateAppearance(viewController: UIKit.UIViewController)
}
public protocol ScrollUpdater : AnyObject {
  var scrollViewStartScrolling: ((UIKit.UIScrollView) -> ())? { get set }
  var scrollViewScrolling: ((UIKit.UIScrollView) -> ())? { get set }
  var scrollViewEndScrolling: ((UIKit.UIScrollView) -> ())? { get set }
}
public protocol GlobalSearchTopViewDelegate : AnyObject {
  func sortTitle(topView view: PRUI.GlobalSearchTopView) -> Swift.String?
  func topView(_ view: PRUI.GlobalSearchTopView, didTapOnSortButton sender: UIKit.UIButton)
  func topView(_ view: PRUI.GlobalSearchTopView, didSelectTab tab: PRUIKit.TabItem)
  func availableTabViews(_ view: PRUI.GlobalSearchTopView) -> PRUI.GlobalSearchTopView.Views
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class GlobalSearchTopView : UIKit.UIView, PRUIKit.TopTabView, PRUIKit.TabsPanelDelegate {
  public struct Views : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = PRUI.GlobalSearchTopView.Views
    public typealias Element = PRUI.GlobalSearchTopView.Views
    public typealias RawValue = Swift.Int
  }
  @_Concurrency.MainActor @preconcurrency weak final public var scrollUpdater: (any PRUI.ScrollUpdater)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any PRUI.GlobalSearchTopViewDelegate)?
  @_Concurrency.MainActor @preconcurrency final public var visibleViews: PRUI.GlobalSearchTopView.Views {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var tabs: [PRUIKit.TabItem] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var tabHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var height: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency final public func select(tab: PRUIKit.TabItem)
  @_Concurrency.MainActor @preconcurrency final public func refresh()
  @_Concurrency.MainActor @preconcurrency final public func tabsPanel(_ view: PRUIKit.TabsPanel, didSelectTab tab: PRUIKit.TabItem)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol PublicationDetailsTopViewDelegate : AnyObject {
  func topView(_ view: PRUI.PublicationDetailsTopView, didChangeAutodownloadStatus autodownload: Swift.Bool)
  func topView(_ view: PRUI.PublicationDetailsTopView, didChangeFollowingStatus following: Swift.Bool)
  func topView(_ view: PRUI.PublicationDetailsTopView, didSelectTab tab: PRUIKit.TabItem)
  func topView(_ view: PRUI.PublicationDetailsTopView, didTapOnServiceSelectionButton button: UIKit.UIButton)
  func topView(_ view: PRUI.PublicationDetailsTopView, didTapOnOnlineViewsButton button: UIKit.UIButton)
  func topView(_ view: PRUI.PublicationDetailsTopView, didChangeMaxHeight height: CoreFoundation.CGFloat)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class PublicationDetailsTopView : UIKit.UIView, PRUIKit.TopTabView, PRUIKit.TabsPanelDelegate {
  public struct Views : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = PRUI.PublicationDetailsTopView.Views
    public typealias Element = PRUI.PublicationDetailsTopView.Views
    public typealias RawValue = Swift.Int
  }
  @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any PRUI.PublicationDetailsTopViewDelegate)?
  @_Concurrency.MainActor @preconcurrency final public var visibleViews: PRUI.PublicationDetailsTopView.Views {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var tabs: [PRUIKit.TabItem] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var title: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var isFollowable: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var following: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var autodownloadSwitchOn: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var autodownloadSwitchEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var serviceSelectionViewVisible: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var selectedServiceName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var onlineStoriesTitle: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var onlineStoriesButtonHidden: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var bannerView: UIKit.UIView? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var height: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var minHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var additionalTopHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor @preconcurrency final public var titleView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override final public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public func setMasthead(_ image: UIKit.UIImage?, animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency final public func tabsPanel(_ view: PRUIKit.TabsPanel, didSelectTab tab: PRUIKit.TabItem)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func applicationDidBecomeActive(_ application: UIKit.UIApplication)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func applicationWillEnterForeground(_ application: UIKit.UIApplication)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func applicationDidEnterBackground(_ application: UIKit.UIApplication)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func applicationWillTerminate(_ application: UIKit.UIApplication)
}
extension PRUI.PublicationDetailsView : PRUIKit.AccessibleView {
  @_Concurrency.MainActor @preconcurrency final public func setupAccessibility()
}
@objc extension PRUI.PRMenuViewCell {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupAccessibility()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateAccessibilityState()
}
@objc @_inheritsConvenienceInitializers final public class CommandPresentInterstitialAD : ObjectiveC.NSObject {
  @objc final public class var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public class func execute(container: UIKit.UIViewController, banner: PRAds.AdBannerPresentation, articleId: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class NTFTextualRelatedArticleCell : PRUI.NTFRelatedArticleCell, PRUI.NTFArticleCell {
  @_Concurrency.MainActor @preconcurrency @objc override final public func setupSubviews()
  @_Concurrency.MainActor @preconcurrency @objc final public func setup(article: PRAPI.NTFArticleItem?, contentWidth: CoreFoundation.CGFloat, action: PRUI.FeedItemAction?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class MySubscriptionsView : PRUIKit.SwiftView {
  public struct Constants {
  }
  public struct CellIdentifiers {
  }
  @_Concurrency.MainActor @preconcurrency final public var delegate: (any UIKit.UITableViewDataSource & UIKit.UITableViewDelegate)? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency final public var tableView: UIKit.UITableView {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class CommandShowFeedbackComposer : PRCommands.PRCommand {
  @objc override final public class var defaultCommandName: PRCommands.PRCommandName {
    @objc get
  }
  @objc override final public func invoke(withParameters parameters: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRUI.PRCommandOpenHomeFeed {
  @objc dynamic public func homeFeedVC() -> PRUI.PRVerticalFeedVC
}
extension PRUI.PROrderDelivery {
  @objc dynamic public func waitForHotSpotUpdate() async
  @objc dynamic public func stopHotSpotUpdateWaiting()
}
extension PRUI.PRHotSpotServicesBannerVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func bannerHeight(forWidth: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
}
@objc extension PRUI.PRSourcesVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var shouldAnimateDisclosure: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func pushFilteredCollection(_ vc: UIKit.UIViewController, animated: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func pushFilteredCollection(_ vc: UIKit.UIViewController)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func applyFilter(_ filter: PRCatalogModel.CatalogEntity)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class PublicationFiltersCollectionVC : PRUI.CatalogFiltersCollectionVC, PRAPI.PRCatalogFilterDelegate {
  @objc @_Concurrency.MainActor @preconcurrency public init(catalogFilter: PRAPI.PRCatalogFilter, delegate: (any PRUI.PRSourceCategoriesCollectionDelegate)?)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency required public init(filters: [any PRAPI.CatalogNavigation], delegate: (any PRUI.PRSourceCategoriesCollectionDelegate)?)
  @_Concurrency.MainActor @preconcurrency @objc final public func catalogFilterDidUpdate(_ sender: Any)
  @objc deinit
}
@objc final public class AttributedBodyActivityItem : PRUI.PRActivityItem {
  @objc public init(title: Swift.String, fullText: Foundation.NSAttributedString, summary: Foundation.NSAttributedString)
  @objc override final public func item(forActivityType activityType: UIKit.UIActivity.ActivityType) -> Any?
  @objc override final public func activityViewControllerPlaceholderItem(_ activityViewController: UIKit.UIActivityViewController) -> Any
  @objc deinit
}
@objc extension PRUI.PRSourceCollectionVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var representsTitleItemExemplars: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var shouldOpenReader: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showAutoDownloadSuggestion(_ issue: PRAPI.PRTitleItem) -> Swift.Bool
}
extension PRUI.PRSourceCollectionVC : PRAPI.LoadableModelObserver {
  @_Concurrency.MainActor @preconcurrency public func modelDidFinishLoading(model: any PRAPI.ObservableModel, result: PRUtils.VoidResult)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency final public class TextFlowActivityVC : PRUIKit.PRActivityVC, PRUI.TextFlowUIStyleOserver {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@objc @objcMembers final public class LowCreditsAlertPresenter : ObjectiveC.NSObject {
  public typealias Action = PRSyntacticSugar.PRSimpleBlock
  @objc final public var canPresentAlert: Swift.Bool {
    @objc get
  }
  @objc public init(buyPremiumAction: @escaping PRUI.LowCreditsAlertPresenter.Action, otherOptionsAction: PRUI.LowCreditsAlertPresenter.Action? = nil)
  @objc final public func presentAlertIfNeeded(remainingCredits: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class PRMyLibraryItemActionAccessActor : ObjectiveC.NSObject {
  @objc public static func performAction(_ actionType: PRUI.ActionType, item: PRUI.PRMyLibraryItemActionAccessActor.Item, action: @escaping () -> ())
  @objc public static func performAction(_ actionType: PRUI.ActionType, item: PRUI.PRMyLibraryItemActionAccessActor.Item, parameters: PRUI.ActionAccessParameters? = nil, action: @escaping () -> ())
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRUI.PRMyLibraryItemActionAccessActor {
  public typealias Item = PRAPI.PRMyLibraryItem
}
extension UIKit.UIUserInterfaceStyle {
  public var title: Swift.String {
    get
  }
  public var textFlowStyleTitle: Swift.String {
    get
  }
}
extension UIKit.UIUserInterfaceStyle : @retroactive Swift.CaseIterable {
  public static let allCases: [UIKit.UIUserInterfaceStyle]
  @available(iOS 12.0, *)
  public typealias AllCases = [UIKit.UIUserInterfaceStyle]
}
@_inheritsConvenienceInitializers @objc final public class Wide3CFeedLayoutItem : PRUI.AbstractFeedLayoutItem {
  @objc required dynamic public init()
  @objc deinit
}
@objc extension PRUI.PRSourceItemCell {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateRibbonStyle()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class CatalogSchemeProvider : PRUI.PRSchemeProvider {
  @objc final public class var publications: PRUI.CatalogSchemeProvider {
    @objc get
  }
  @objc final public class var home: PRUI.CatalogSchemeProvider {
    @objc get
  }
  @objc final public class var home2: PRUI.CatalogSchemeProvider {
    @objc get
  }
  @objc final public class var library: PRUI.CatalogSchemeProvider {
    @objc get
  }
  @objc final public class var favorites: PRUI.CatalogSchemeProvider {
    @objc get
  }
  @objc final public class var latestIssues: PRUI.CatalogSchemeProvider {
    @objc get
  }
  @objc final public class var book: PRUI.CatalogSchemeProvider {
    @objc get
  }
  @objc final public var sections: [PRAPI.CatalogSectionScheme]
  @objc override dynamic public init()
  @objc final public func firstScheme(type: PRConfiguration.PRCatalogSectionType) -> PRAPI.CatalogSectionScheme?
  @objc override final public func loadConfigurationJSON(_ names: [Swift.String])
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class CommandPresentBookWebPurchase : PRCommands.PRCommand {
  @objc override final public class var defaultCommandName: PRCommands.PRCommandName {
    @objc get
  }
  @objc override final public func invoke(withParameters parameters: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol InsetWrapable {
  @objc var insetWrapperInsets: () -> UIKit.UIEdgeInsets { get }
  @objc var needInsetWrapper: Swift.Bool { get }
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var insetWrapper: UIKit.UIViewController {
    @objc get
  }
}
@objc extension PRUI.PRPremiumBannerView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func closeAction(_ sender: Any)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func proceedAction(_ sender: Any)
}
@objc extension PRUI.VerticalTextFlowVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateContentInsets()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func emptyFeedMessageCellHeight(in tableView: UIKit.UITableView) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func registerFeedLayoutItemCells()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func cellClass(layoutItem: PRUI.AbstractFeedLayoutItem) -> PRUI.NTFArticleSetCell.Type?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupCoBranding()
}
extension PRUI.VerticalTextFlowVC : PRUIKit.ActivityPresenter {
  public typealias ActivityVC = PRUI.TextFlowActivityVC
}
@available(swift, obsoleted: 1.0)
extension PRUI.VerticalTextFlowVC {
  @objc(showActivityIndicator) @_Concurrency.MainActor @preconcurrency dynamic public func _showActivityIndicator()
  @objc(hideActivityIndicator) @_Concurrency.MainActor @preconcurrency dynamic public func _hideActivityIndicator()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class EmailPermissionSettingsVC : PRUI.PRSettingsDetailsPanelVC {
  @objc @_Concurrency.MainActor @preconcurrency final public var account: PRAPI.PRAccountItem? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class HotSpotNotFoundVC : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override final public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PRUI.HotSpotNotFoundVC : PRUI.HotSpotNotFoundViewDelegate {
  @_Concurrency.MainActor @preconcurrency final public func close()
  @_Concurrency.MainActor @preconcurrency final public func contentSizeDidChange(_ size: CoreFoundation.CGSize)
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupNavigationItemTitleView(mastheadProvider: any PRAPI.MastheadProvider, title: Swift.String?, subtitle: Swift.String?)
}
@objc extension PRAPI.PRAccountItem {
  @objc dynamic public func startHotSpotSearching()
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class PRBottomBar : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var barSpacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public let barLayoutGuide: UIKit.UILayoutGuide
  @objc @_Concurrency.MainActor @preconcurrency final public let bottomSafeAreaInsetGuide: UIKit.UILayoutGuide
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func updateConstraints()
  @objc deinit
}
extension PRUI.PRBottomBar {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addArrangedBarSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func addBarSubview(_ subview: UIKit.UIView, topInset: CoreFoundation.CGFloat?, bottomInset: CoreFoundation.CGFloat?)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addBarSubview(_ subview: UIKit.UIView, topInset: CoreFoundation.CGFloat, bottomInset: CoreFoundation.CGFloat)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addBarSubview(_ subview: UIKit.UIView, heightMultiplier: CoreFoundation.CGFloat = 1.0, centerYOffset: CoreFoundation.CGFloat = 0.0)
}
extension PRUI.PRBottomBar {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func insertAttachedSubview(_ subview: UIKit.UIView, hideShadow: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func insertAttachedSubview(_ subview: UIKit.UIView, leadingInset: CoreFoundation.CGFloat? = 0, trailingInset: CoreFoundation.CGFloat? = 0)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func insertAttachedSubview(_ subview: UIKit.UIView, leadingInset: CoreFoundation.CGFloat, trailingInset: CoreFoundation.CGFloat)
}
extension PRUI.PRBottomBar {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isBarHidden: Swift.Bool {
    @objc get
  }
  @objc(showAnimated:) @_Concurrency.MainActor @preconcurrency dynamic public func show(animated: Swift.Bool = false)
  @objc(hideAnimated:) @_Concurrency.MainActor @preconcurrency dynamic public func hide(animated: Swift.Bool = false)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updatePositionOnScrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updatePositionOnScrollViewDidStop() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(PRMenuBottomBar) @_Concurrency.MainActor @preconcurrency public class PRMenuBottomBar : PRUI.PRBottomBar, PRUIKit.PRMenuBottomBar {
  @objc @_Concurrency.MainActor @preconcurrency final public let menuVC: PRUI.PRMenuVC
  @objc @_Concurrency.MainActor @preconcurrency public var barStackItemsDistributed: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc public var menu: PRUIKit.PRMenu? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc public var menuContainerVC: UIKit.UIViewController {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc required override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc public func view(for item: PRUIKit.PRMenuItem) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func addArrangedBarSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
extension UIKit.UINavigationBar {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func addBlurSubview(blurFrame: CoreFoundation.CGRect, style: UIKit.UIBlurEffect.Style) -> UIKit.UIVisualEffectView
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class TitleExemplarsHorizontalCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor @preconcurrency final public class func desiredHeightFor(collectionWidth: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency weak final public var delegate: (any PRUI.PRSourceCollectionControllerDelegate)? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var titleExemplars: [PRAPI.PRTitleItemExemplar]? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var options: PRUI.PRSourceCollectionOption {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupApplicationShortcutItems()
}
@objc final public class BodyActivityItem : PRUI.PRActivityItem {
  @objc public init(title: Swift.String, fullText: Swift.String?, summary: Swift.String?)
  @objc override final public func item(forActivityType activityType: UIKit.UIActivity.ActivityType) -> Any?
  @objc override final public func activityViewControllerPlaceholderItem(_ activityViewController: UIKit.UIActivityViewController) -> Any
  @objc deinit
}
@objc extension PRCatalogModel.CatalogItem {
  @objc dynamic public func thumbnail(size: CoreFoundation.CGSize) -> PRThumbnail.PRCatalogItemThumbnail?
}
extension PRCatalogModel.Book {
  @objc override final public func thumbnail(size: CoreFoundation.CGSize) -> PRThumbnail.PRCatalogItemThumbnail?
}
@objc @_Concurrency.MainActor @preconcurrency public class CatalogFiltersCollectionVC : PRUI.PRSourceCategoriesCollectionVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var dataProvider: [any PRAPI.CatalogNavigation]! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency required public init(filters: [any PRAPI.CatalogNavigation], delegate: (any PRUI.PRSourceCategoriesCollectionDelegate)?)
  @objc deinit
}
@available(*, unavailable)
@objc extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func brazeHandleBackgroundNotification(userInfo: [Swift.AnyHashable : Any], handler: @escaping (UIKit.UIBackgroundFetchResult) -> Swift.Void) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func brazeHandleUserNotification(response: UserNotifications.UNNotificationResponse, handler: @escaping () -> Swift.Void) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc final public class KYMUtil : ObjectiveC.NSObject {
  @objc public static func systemParameters() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class CompatibilityFactory : ObjectiveC.NSObject {
  @objc public static func publicationDetailsVC(with order: PRUI.PROrder) -> UIKit.UIViewController
  @objc public static func publicationDetailsVC(with order: PRUI.PROrder, options: PRUI.PROrderOption) -> UIKit.UIViewController
  @objc public static func latestIssuesDataSource(with titleItem: PRAPI.PRTitleItem) -> any PRAPI.CatalogItemDataSourceProtocol
  @objc public static func latestIssuesDataSource(with titleItem: PRAPI.PRTitleItem, pageSize: Swift.Int) -> any PRAPI.CatalogItemDataSourceProtocol
  @objc public static func latestIssuesDataSource(with titleItemExemplar: PRAPI.PRTitleItemExemplar, titleGroups: [PRUI.PRIssuesGroup]) -> any PRAPI.CatalogItemDataSourceProtocol
  @objc public static func multipleLatestIssuesDataSource(withSourceList sourceList: PRAPI.PRLatestIssuesList) -> any PRAPI.CatalogItemDataSourceProtocol
  @objc public static func presentUserConsentVC(withDismissCompletion completion: (() -> ())?)
  @objc public static func getDeviceManagementVC(withAccount account: PRAPI.PRAccountItem) -> UIKit.UIViewController
  @objc public static func getDeviceManagementVC(withDevices items: [PRAPI.DeviceActivation]) -> UIKit.UIViewController
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class HotSpotManagerUICoordinator : PRAPI.HotSpotManagerUIDelegate {
  public struct UIScope : Swift.OptionSet {
    public static let settingsAlert: PRUI.HotSpotManagerUICoordinator.UIScope
    public static let welcome: PRUI.HotSpotManagerUICoordinator.UIScope
    public static let search: PRUI.HotSpotManagerUICoordinator.UIScope
    public static let welcomePopUp: PRUI.HotSpotManagerUICoordinator.UIScope
    public static let all: PRUI.HotSpotManagerUICoordinator.UIScope
    public static let `default`: PRUI.HotSpotManagerUICoordinator.UIScope
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = PRUI.HotSpotManagerUICoordinator.UIScope
    public typealias Element = PRUI.HotSpotManagerUICoordinator.UIScope
    public typealias RawValue = Swift.Int
  }
  final public var components: PRUI.HotSpotManagerUICoordinator.UIScope
  @_Concurrency.MainActor final public func hotSpotManagerShouldStart(_ manager: PRAPI.HotSpotManager) async -> Swift.Bool
  final public func hotSpotManagerDidStart(_ manager: PRAPI.HotSpotManager)
  final public func hotSpotManager(_ manager: PRAPI.HotSpotManager, didUpdateHotSpotsList hotSpots: [PRAPI.GeoFencingHotSpot])
  final public func hotSpotManager(_ manager: PRAPI.HotSpotManager, didEnterHotSpot hotSpot: PRAPI.GeoFencingHotSpot)
  final public func hotSpotManager(_ manager: PRAPI.HotSpotManager, didExitHotSpot hotSpot: PRAPI.GeoFencingHotSpot?)
  final public func hotSpotManager(_ manager: PRAPI.HotSpotManager, didFail error: PRAPI.HotSpotManager.ManagerError)
  @objc deinit
}
@objc extension PRAPI.PRModel {
  @objc dynamic public var isOnboardingEnabled: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class LoadMoreReusableView : UIKit.UICollectionReusableView {
  @objc @_Concurrency.MainActor @preconcurrency final public var isInvisible: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override final public func prepareForReuse()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BookHubVC : PRUI.PREmbedablePubHubVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isSearchAvailable: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc final override public func setupFilterSectionCell(_ cell: UIKit.UICollectionViewCell, section: PRAPI.PRCatalogSection)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var catalogPath: Swift.String {
    @objc get
  }
  @objc deinit
}
public typealias FeedItemActionSignal = (_ item: any PRAPI.NTFItem, _ sender: Any?, _ completionHandler: @escaping () -> ()) -> ()
@objc @objcMembers final public class FeedItemAction : ObjectiveC.NSObject {
  @objc final public var actions: PRConfiguration.PRFeedArticleAction
  @objc final public var handler: PRUI.FeedItemActionSignal
  @objc public init(with actions: PRConfiguration.PRFeedArticleAction, handler actionBlock: @escaping PRUI.FeedItemActionSignal)
  @objc deinit
}
extension PRUI.PREmbedablePubHubVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func discloseCategory(_ value: any PRAPI.CatalogNavigation, sender: UIKit.UIView?)
}
@objc public enum PaymentOptionsMode : Swift.Int {
  case allPaymentOptions
  case singleProduct
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency final public class PaymentOptionsVC : PRUI.PRBasePaymentOptionsVC, PRUI.UITextViewContainer, PRUI.PurchaseProductProvider {
  @_Concurrency.MainActor @preconcurrency final public var mode: PRUI.PaymentOptionsMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var fullProductList: [PRAPI.PRProduct] {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency final public var selectedProduct: PRAPI.PRProduct? {
    get
  }
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(products: [PRAPI.PRProduct], delegate: any PRUI.PRPurchaseSelectorProtocol, CID: Swift.String, date: Foundation.Date)
  @objc @_Concurrency.MainActor @preconcurrency public init(products: [PRAPI.PRProduct], delegate: any PRUI.PRPurchaseSelectorProtocol, CID: Swift.String?, date: Foundation.Date?, premiumProducts: [PRAPI.PRProduct]?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewSafeAreaInsetsDidChange()
  @_Concurrency.MainActor @preconcurrency @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func updateHotSpotCell(_ activating: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc override final public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc final public func textViewWillDismissContainer(_ textView: PRUI.UITextViewWithLinks)
  @_Concurrency.MainActor @preconcurrency @objc override final public var navigationBarRightBarButtonItems: [UIKit.UIBarButtonItem]? {
    @objc get
  }
  @objc deinit
}
extension PRUI.PaymentOptionsVC : PRAnalytics.RegistrationAnalyticsProvider {
  @_Concurrency.MainActor @preconcurrency final public var registrationContext: PRAnalytics.RegistrationAnalyticsContext {
    get
  }
}
@objc extension PRUI.VerticalTextFlowVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func singleArticle(item: Any) -> (any PRAPI.NTFItem)?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func articleSet(item: Any) -> [any PRAPI.NTFItem]?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func singleArticle(fli: PRUI.AbstractFeedLayoutItem?) -> (any PRAPI.NTFItem)?
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func columnsCount(fli: PRUI.AbstractFeedLayoutItem?) -> Swift.Int
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func shouldHighlight(item: Any) -> Swift.Bool
}
@objc extension PRUI.PROrderVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var remainingCredits: Foundation.NSNumber? {
    @objc get
  }
}
extension PRUI.PROrderVC : PRUIKit.NavigationBarAppearanceProvider {
  @_Concurrency.MainActor @preconcurrency public var standartNavigatioBarAppearanceType: UIKit.UINavigationBarAppearance.BackgroundType {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class AutoTranslateMenuCell : UIKit.UITableViewCell {
  @objc @_Concurrency.MainActor @preconcurrency public var switchActionHandler: ((Swift.Bool) -> ())?
  @objc @_Concurrency.MainActor @preconcurrency public var isOn: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func configure(with pair: PRAPI.AutoTranslateLanguagePair, isOn: Swift.Bool = true)
  @objc deinit
}
@objc extension PRUI.PRSourceItemCell {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupCell(item: any PRAPI.PRCatalogItem)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func observeBookLicenseUpdate(_ observe: Swift.Bool)
}
extension PRUI.PremiumBannerView {
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var containerView: UIKit.UIView {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundGradient: PRUIKit.BrandGradientView {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var dismissButton: UIKit.UIButton {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var titleImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundImageView: UIKit.UIImageView {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var textLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var titleLabel: UIKit.UILabel {
    @objc get
    @objc set
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class AppMenuItemInfo : ObjectiveC.NSObject {
  @objc final public let type: PRUI.PRAppMenuItemType
  @objc final public let icon: PRUI.PRAppMenuIcon?
  @objc final public let customIconName: Swift.String?
  @objc final public let title: Swift.String?
  @objc final public let url: Swift.String?
  @objc final public let isFolded: Swift.Bool
  @objc deinit
}
@objc public protocol AppMenuSchemeProvider {
  @objc var items: [PRUI.AppMenuItemInfo] { get }
  @objc func firstItem(type: PRUI.PRAppMenuItemType) -> PRUI.AppMenuItemInfo?
}
@objc @_inheritsConvenienceInitializers final public class AppMenuSchemeProviderImpl : PRUI.PRSchemeProvider, PRUI.AppMenuSchemeProvider {
  @objc final public var items: [PRUI.AppMenuItemInfo] {
    get
  }
  @objc override dynamic public init()
  @objc final public func firstItem(type: PRUI.PRAppMenuItemType) -> PRUI.AppMenuItemInfo?
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency final public class ExternalAuthSafariVC : SafariServices.SFSafariViewController {
  @objc @_Concurrency.MainActor @preconcurrency public init?(provider: Swift.String, extKey: Swift.String, onlineToken: Swift.String, linkToCurrentAccount: Swift.Bool, completion: @escaping (_ success: Swift.Bool, _ isNewUser: Swift.Bool, (any Swift.Error)?) -> ())
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @objc deinit
}
extension PRUI.ExternalAuthSafariVC : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func safariViewController(_ controller: SafariServices.SFSafariViewController, activityItemsFor URL: Foundation.URL, title: Swift.String?) -> [UIKit.UIActivity]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class CancellationPolicyCell : PRUIKit.TextCell {
  @_Concurrency.MainActor @preconcurrency override final public func setupView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension PRUI.PRMenuVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupAccessibility()
}
@objc extension PRAPI.PRAccountItem {
  @objc dynamic public func presentEditAccount()
}
extension PRUI.AutoTranslateSettingsVC : PRAPI.AutoTranslationStateAnalyticsProvider {
  @_Concurrency.MainActor @preconcurrency @objc final public var isAutoTranslationOn: Swift.Bool {
    @objc get
  }
}
extension PRUI.PRCommentComposeVC : PRUIKit.NavigationBarAppearanceProvider {
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency final public class PRRoundedLabel : UIKit.UILabel {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency final public var horizontalPadding: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency final public var verticalPadding: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency final public var autoPadding: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override final public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class NetworkErrorView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public class func height(for width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency final public var onTryAgain: (() -> ())?
  @objc @_Concurrency.MainActor @preconcurrency final public var error: (any Swift.Error)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc extension PRUI.PRSourcesVC : PRAPI.CatalogViewAnalyticsProvider {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var catalogPath: Swift.String {
    @objc get
  }
  @objc @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency dynamic public func _trackCatalogView()
}
extension PRUI.PRMainVC {
  @objc @_Concurrency.MainActor @preconcurrency weak public static var currentInstance: PRUI.PRMainVC?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func topMost(fullScreen: Swift.Bool) -> UIKit.UIViewController
}
@objc extension UIKit.UIApplication {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var mainVC: PRUI.PRMainVC? {
    @objc get
  }
}
@_Concurrency.MainActor @preconcurrency public class NewsChannelsVC : PRUIKit.SwiftVC<PRUI.NewsChannelsView, PRUI.NewsChannelsModel>, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredContentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public init(channels: [PRAPI.PublicationChannel])
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
extension PRUI.PressReader {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var account: PRUI.Account {
    @objc get
  }
}
public enum SearchableDataSourceSortingOrder {
  case none
  case relevance
  case alphabet
  case date
  public static func == (a: PRUI.SearchableDataSourceSortingOrder, b: PRUI.SearchableDataSourceSortingOrder) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SearchableDataSource : PRAPI.LoadableDataSource {
  var searchText: Swift.String { get set }
  var availableSortOptions: [PRUI.SearchableDataSourceSortingOrder] { get }
  var sortingOption: PRUI.SearchableDataSourceSortingOrder { get set }
  var isOngoingSearchSupported: Swift.Bool { get }
}
extension PRUI.SearchableDataSource {
  public var availableSortOptions: [PRUI.SearchableDataSourceSortingOrder] {
    get
  }
  public var sortingOption: PRUI.SearchableDataSourceSortingOrder {
    get
    set
  }
  public var isOngoingSearchSupported: Swift.Bool {
    get
  }
}
@objc extension PRUI.PRBookmarkListVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateMasthead()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func update(presentationStyle: UIKit.UIModalPresentationStyle)
}
@objc public protocol ScrollableContentDelegate {
  @objc optional func scrollViewBeginScrolling(_ scrollView: UIKit.UIScrollView)
  @objc func scrollViewScrolling(_ scrollView: UIKit.UIScrollView)
  @objc optional func scrollViewEndScrolling(_ scrollView: UIKit.UIScrollView)
}
@objc public class ScrollObserver : ObjectiveC.NSObject {
  @objc deinit
  public init(delegate: any PRUI.ScrollableContentDelegate)
  public func observe(scrollView: UIKit.UIScrollView?)
}
extension PRUI.PRErrorManager : PRProtocols.Singleton {
  @objc public static func instance() -> Self
  @objc public static func hasInstance() -> Swift.Bool
  @objc public static func dismiss()
}
@objc final public class BannersHubDataSource : PRUI.PRPubHubDataSource {
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class PlaceholderCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
extension PRAPI.NTFArticleItem {
  @objc dynamic public func preloadVisuals()
  @objc dynamic public func preloadVisuals(presentationType: PRAPI.NTFArticleItemPresentationType, completion: (() -> ())? = nil)
}
@_Concurrency.MainActor @preconcurrency final public class CustomerSupportVC : PRUIKit.SwiftVC<PRUI.MySubscriptionsView, PRUI.MySubscriptionsModel>, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency public init(account: PRAPI.PRAccountItem)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc final public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@objc final public class CatalogHubDataSource : PRUI.PRPubHubDataSource {
  public init()
  @objc override final public func hotspotSection(with index: Swift.Int) -> PRAPI.PRCatalogSection?
  @objc override final public func updateSection(_ section: PRAPI.PRCatalogSection, source: any PRAPI.CatalogItemDataSourceProtocol)
  @objc override final public var adScreen: PRAds.AdBannerScreen {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class NTFRelatedArticleWithThumbnailCell : PRUI.NTFRelatedArticleCell, PRUI.NTFArticleCell {
  @_Concurrency.MainActor @preconcurrency @objc override final public class var anchorHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func setupSubviews()
  @_Concurrency.MainActor @preconcurrency @objc final public func setup(article: PRAPI.NTFArticleItem?, contentWidth: CoreFoundation.CGFloat, action: PRUI.FeedItemAction?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class AdsServiceProxy : ObjectiveC.NSObject, PRAds.AdsService {
  @objc final public func requestGoogleAdsConfig(_ completion: @escaping (PRUtils.SPNode?, (any Swift.Error)?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
extension WebKit.WKWebView {
  public typealias SizeObserver = (CoreFoundation.CGSize) -> ()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var contentSizeObserver: WebKit.WKWebView.SizeObserver? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func makeTransparent()
}
public struct NewsChannelsModel {
}
@objc extension PRUI.PaymentOptionsVC {
  @objc @_Concurrency.MainActor @preconcurrency final public func setupAccessibility()
}
@objc public protocol NTFArticleCell {
  @objc func setup(article: PRAPI.NTFArticleItem?, contentWidth: CoreFoundation.CGFloat, action: PRUI.FeedItemAction?)
}
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isOffline: Swift.Bool {
    @objc get
  }
}
extension PRAPI.PRMyLibraryItem {
  @objc dynamic public var articleTools: PRUI.PRSmartArticleTools {
    @objc get
  }
  @objc dynamic public var dataSource: PRUI.NTFMyLibraryItemDataSource {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PremiumBannerView : PRUI.PRPremiumBannerView, PRUIKit.ProceedableView {
  public enum Style {
    case fullScreen
    case text
    case card
    case kiosk
    public static func == (a: PRUI.PremiumBannerView.Style, b: PRUI.PremiumBannerView.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setupLabels()
  @_Concurrency.MainActor @preconcurrency public func stackViewInsets() -> UIKit.UIEdgeInsets
  @_Concurrency.MainActor @preconcurrency public func horizontalPaddingsForButtons() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public func horizontalPaddingsForLabels() -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public func bannerHeight(forWidth width: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc public protocol PRRadioDataSource : ObjectiveC.NSObjectProtocol {
  @objc var currentArticle: (any PRAPI.NTFArticle)? { get set }
  @objc var hasMoreItemsAtTheBeginning: Swift.Bool { get }
  @objc var hasMoreItemsAtTheEnd: Swift.Bool { get }
  @objc var isReady: Swift.Bool { get }
  @objc var itemsCount: Swift.Int { get }
  @objc var dataState: PRUI.NTFDataState { get }
  @objc var isPremiumAudioAvailable: Swift.Bool { get }
  @objc(articleForIndex:) func article(for index: Swift.Int) -> (any PRAPI.NTFArticle)?
  @objc(indexForArticle:) func index(for article: any PRAPI.NTFArticle) -> Swift.Int
  @objc func getCurrentArticle(loadingHandler: ((any PRAPI.NTFArticle) -> ())?) -> (any PRAPI.NTFArticle)?
  @objc func getCurrentArticle(completion: (((any PRAPI.NTFArticle)?) -> ())?)
  @objc func article(id: Swift.String) -> (any PRAPI.NTFArticle)?
  @objc func loadMoreToTheEnd() async
  @objc func loadMoreAtTheBeginning() async
}
extension PRAPI.PRCatalog {
  public var downloaded: any PRUI.Downloaded {
    get
  }
}
extension PRAPI.PRMyLibrary : PRUI.Downloaded {
  public var items: [any PRAPI.PRCatalogItem] {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class BECommandOpenLibrary : PRUI.PRCommandOpenDownloaded {
  @objc override final public var downloadedVC: UIKit.UIViewController {
    @objc get
  }
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
extension PRCatalogModel.BookContent : PRUI.ActionAccessControllable {
  @objc dynamic public func isActionAllowed(_ actionType: PRUI.ActionType, parameters: PRUI.ActionAccessParameters?) -> Swift.Bool
}
extension PRUI.PremiumBannerView {
  @_Concurrency.MainActor @preconcurrency public func setupAccessibility()
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency final public class PRHiddenWhenEmptyLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc override final public var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc extension PRUI.PRSplashScreenView {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupAccessibility()
}
extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupThirdPartyLibraries(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
}
@objc @_inheritsConvenienceInitializers final public class CommandOpenFavourites : PRCommands.PRCommand {
  @objc override final public class var isEnabled: Swift.Bool {
    @objc get
  }
  @objc override final public class var defaultCommandName: PRCommands.PRCommandName {
    @objc get
  }
  @objc override final public class func execute(withParameters parameters: [Swift.AnyHashable : Any]?)
  @objc override final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc override final public func invoke(withParameters parameters: [Swift.AnyHashable : Any]?)
  @objc override dynamic public init(name: PRCommands.PRCommandName)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRUI.PRAccountVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func sendDeleteAccountEmailRequest(_ recepientEmail: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func deleteAccount()
}
extension PRUI.PRAccountVC : MessageUI.MFMailComposeViewControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func mailComposeController(_ controller: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: (any Swift.Error)?)
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var analyticsUUID: Swift.String {
    @objc get
  }
}
extension PRAPI.PRCatalogItem {
  public var download: (any PRUI.Download)? {
    get
  }
}
@_inheritsConvenienceInitializers @objc final public class Regular2CFeedLayoutItem : PRUI.AbstractFeedLayoutItem {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class WelcomeHotSpotVC : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency final public var onContinue: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency final public var onCancel: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override final public func dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PRUI.WelcomeHotSpotVC : PRUI.WelcomeHotSpotViewDelegate {
  @_Concurrency.MainActor @preconcurrency final public func `continue`()
  @_Concurrency.MainActor @preconcurrency final public func cancel()
}
@objc extension PRUI.PRAppMenuVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func setupAccessibility()
}
@_inheritsConvenienceInitializers @objc final public class RegularFeedLayoutItem : PRUI.AbstractFeedLayoutItem {
  @objc final public var isHighlighted: Swift.Bool
  @objc required dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency final public class InterestFeedVC : PRUI.PRVerticalFeedVC {
  @_Concurrency.MainActor @preconcurrency @objc override final public var shouldHideBarsOnSwipe: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var emptyFeedMessage: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(with interest: PRAPI.Interest)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
extension PRUI.PRCommentTableVC : PRUIKit.NavigationBarAppearanceProvider {
}
extension PRUI.PRShareComponent {
  @objc @_Concurrency.MainActor dynamic public func updateSharingUrl(defaultValue: Swift.String) async
}
@objc extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupHotSpotManager()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func findHotSpot() -> Swift.Bool
}
@objc extension PRUI.PRSourceCategoriesCollectionVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupCategoryCell(_ cell: PRUI.CatalogFilterCell, indexPath: Foundation.IndexPath)
}
extension Foundation.NSNotification.Name {
  public static let translationStarted: Foundation.Notification.Name
  public static let translationEnded: Foundation.Notification.Name
  public static let translationUpdated: Foundation.Notification.Name
}
@objc extension Foundation.NSNotification {
  @objc public static let translationStarted: Foundation.Notification.Name
  @objc public static let translationEnded: Foundation.Notification.Name
  @objc public static let translationUpdated: Foundation.Notification.Name
}
public typealias TranslatableArticle = ObjectiveC.NSObject & PRAPI.NTFArticle
@objc @_Concurrency.MainActor @objcMembers final public class AutoTranslationActor : ObjectiveC.NSObject, PRAPI.AutoTranslationPromtAnalyticsProvider {
  public typealias TranslationCompletion = (Swift.Bool, (any Swift.Error)?) -> ()
  public typealias MLITranslationCompletion = (Swift.String, Swift.Bool, (any Swift.Error)?) -> ()
  public enum AutoTranslationError : Swift.Error {
    case languagePairsLimitReached
    public static func == (a: PRUI.AutoTranslationActor.AutoTranslationError, b: PRUI.AutoTranslationActor.AutoTranslationError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc(defaultActor) @_Concurrency.MainActor public static let `default`: PRUI.AutoTranslationActor?
  @objc @_Concurrency.MainActor public static let disclaimerText: Foundation.NSAttributedString?
  @objc @_Concurrency.MainActor public init(options: PRAPI.AutoTranslateOptions)
  @objc @_Concurrency.MainActor final public func isAvailableForAnyZone(account: PRAPI.PRAccountItem?) -> Swift.Bool
  @objc @_Concurrency.MainActor final public func isAvailable(zone: PRAPI.AutoTranslationZone, account: PRAPI.PRAccountItem?) -> Swift.Bool
  @objc @_Concurrency.MainActor final public func isAvailable(article: any ObjectiveC.NSObject & PRAPI.NTFArticle, zone: PRAPI.AutoTranslationZone) -> Swift.Bool
  @objc @_Concurrency.MainActor final public func isAvailable(article: any ObjectiveC.NSObject & PRAPI.NTFArticle, zone: PRAPI.AutoTranslationZone, account: PRAPI.PRAccountItem? = nil) -> Swift.Bool
  @objc @_Concurrency.MainActor final public func autoTranslateArticle(_ article: any ObjectiveC.NSObject & PRAPI.NTFArticle, completion: PRUI.AutoTranslationActor.TranslationCompletion?)
  @objc @_Concurrency.MainActor final public func autoTranslateArticle(_ article: any ObjectiveC.NSObject & PRAPI.NTFArticle, silent: Swift.Bool, completion: PRUI.AutoTranslationActor.TranslationCompletion?)
  @objc @_Concurrency.MainActor final public func translateArticleIfNeeded(article: any ObjectiveC.NSObject & PRAPI.NTFArticle, destinationISOCode: Swift.String, zone: PRAPI.AutoTranslationZone, completion: @escaping PRUI.AutoTranslationActor.TranslationCompletion)
  @objc @_Concurrency.MainActor final public func translateArticleShortContentIfNeeded(article: any ObjectiveC.NSObject & PRAPI.NTFArticle, destinationISOCode: Swift.String, zone: PRAPI.AutoTranslationZone, completion: @escaping PRUI.AutoTranslationActor.TranslationCompletion)
  @objc @_Concurrency.MainActor final public func restoreOriginalLanguage(article: any ObjectiveC.NSObject & PRAPI.NTFArticle, completion: @escaping PRUI.AutoTranslationActor.TranslationCompletion)
  @objc @_Concurrency.MainActor final public func isAvailable(mli: PRAPI.PRMyLibraryItem) -> Swift.Bool
  @objc @_Concurrency.MainActor final public func autoTranslateShortContentIfNeeded(mli: PRAPI.PRMyLibraryItem, itemsToTranslate: [any ObjectiveC.NSObject & PRAPI.NTFArticle], completion: PRUI.AutoTranslationActor.MLITranslationCompletion?)
  @objc @_Concurrency.MainActor final public func shortContentMenuItem(mli: PRAPI.PRMyLibraryItem, currentLanguage: Swift.String?, itemsToTranslate: [any ObjectiveC.NSObject & PRAPI.NTFArticle], options menuItemOptions: PRUI.NTFMenuItemProviderOption = [], completion: @escaping PRUI.AutoTranslationActor.MLITranslationCompletion) -> PRUIKit.PRMenuItem?
  @objc @_Concurrency.MainActor final public func shortContentMenu(mli: PRAPI.PRMyLibraryItem, currentLanguageISOCode: Swift.String, itemsToTranslate: [any ObjectiveC.NSObject & PRAPI.NTFArticle], completion: @escaping PRUI.AutoTranslationActor.MLITranslationCompletion) -> PRUIKit.PRMenu?
  @objc @_Concurrency.MainActor final public func languagePairMenuItem(sourceISOCode: Swift.String, destinationISOCode: Swift.String, zone: PRAPI.AutoTranslationZone, completion: (() -> ())?) -> PRUIKit.PRMenuItem
  @objc @_Concurrency.MainActor final public func disclaimMenuItem(completion: (() -> ())?) -> PRUIKit.PRMenuItem
  @objc @_Concurrency.MainActor final public func availablePairs(sourceLanguage: Swift.String) -> [PRAPI.AutoTranslateLanguagePair]
  @objc @_Concurrency.MainActor final public func saveLanguagePair(_ pair: PRAPI.AutoTranslateLanguagePair, zone: PRAPI.AutoTranslationZone) throws
  @objc @_Concurrency.MainActor final public func removePair(_ pair: PRAPI.AutoTranslateLanguagePair, zone: PRAPI.AutoTranslationZone)
  @objc @_Concurrency.MainActor final public func presentDisclaimerAlert()
  @objc @_Concurrency.MainActor final public func trackAnalyticsPairRemovedEvent(pair: PRAPI.AutoTranslateLanguagePair, analyticsZone: PRAnalytics.PRAnalyticsAutoTranslationZoneType)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class OrderCalendarCell : PRUI.PROrderParametersCell {
  @objc @_Concurrency.MainActor @preconcurrency final public var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func awakeFromNib()
  @objc @_Concurrency.MainActor @preconcurrency final public func fill(withTitle title: Swift.String, subtitle: Swift.String?, isDisabled: Swift.Bool)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class PRSimilarsTipButton : PRUI.PRTipButton {
  @_Concurrency.MainActor @preconcurrency @objc override final public var tipSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func updateAppearance()
  @_Concurrency.MainActor @preconcurrency @objc override final public func setupAccessibility()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PRAPI.PRMyLibraryItem : PRUI.ActionAccessControllable {
  @objc dynamic public func isActionAllowed(_ actionType: PRUI.ActionType, parameters: PRUI.ActionAccessParameters?) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @objcMembers @_Concurrency.MainActor @preconcurrency final public class MastheadView : UIKit.UIStackView {
  @objc @_Concurrency.MainActor @preconcurrency public static var height: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var label: UIKit.UILabel {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public let imageView: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @objc @_Concurrency.MainActor @preconcurrency final public func update(image: UIKit.UIImage?, title: Swift.String?)
  @objc deinit
}
@objc final public class ComplexLayoutManager : PRUI.PRCompactLayoutManager {
  @objc final public var preferredColumnLayouts: [Swift.Int]? {
    @objc get
    @objc set
  }
  @objc public init(options: PRUI.NTFLayoutOption, contentWidth: CoreFoundation.CGFloat)
  @objc override final public func compileDataProvider(withItems items: [Any], context: CoreData.NSManagedObjectContext?, targetContext: CoreData.NSManagedObjectContext?, moreFollow: Swift.Bool) -> [Any]
  @objc deinit
}
@objc final public class ImageActivityItem : PRUI.PRActivityItem {
  @objc public init(image: UIKit.UIImage)
  @objc override final public func item(forActivityType activityType: UIKit.UIActivity.ActivityType) -> Any?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers @_Concurrency.MainActor @preconcurrency public class PageSliderWrapperView : UIKit.UIView {
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func show()
  @objc @_Concurrency.MainActor @preconcurrency public func hide()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency final public class PRVotingBar : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency final public var hideBottomSeparator: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var article: (any PRAPI.NTFArticle)? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(article: (any PRAPI.NTFArticle)?)
  @objc @_Concurrency.MainActor @preconcurrency final public func reloadVoting(_ isVoteAvailable: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class TwoTextFieldsView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var textField1: UIKit.UITextField
  @_Concurrency.MainActor @preconcurrency public var textField2: UIKit.UITextField
  @_Concurrency.MainActor @preconcurrency public var delimiterView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func delimitColor() -> UIKit.UIColor?
  @_Concurrency.MainActor @preconcurrency public func setDelimiterColor(color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func configureAutoLayout()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class AppPanelsManagerAlertsCoordinator : ObjectiveC.NSObject {
  @objc final public func presentAlerts()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class ArticleLabel : PRUIKit.UILabelHidable {
  @objc @_Concurrency.MainActor @preconcurrency final public class func secondaryTextParagraphStyle(language: Swift.String?) -> UIKit.NSMutableParagraphStyle
  @objc @_Concurrency.MainActor @preconcurrency final public var contentSize: CoreFoundation.CGSize
  @objc @_Concurrency.MainActor @preconcurrency final public var primaryFont: UIKit.UIFont?
  @objc @_Concurrency.MainActor @preconcurrency final public var secondaryFont: UIKit.UIFont?
  @objc @_Concurrency.MainActor @preconcurrency final public var secondaryTextTopInset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency final public func setText(primary: Swift.String, secondary: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc extension UIKit.UIScreen {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func contentWidth() -> CoreFoundation.CGFloat
}
extension PRUI.PRAppPanelsManager : PRProtocols.Singleton {
  @objc public static func instance() -> Self
  @objc public static func hasInstance() -> Swift.Bool
  @objc public static func dismiss()
}
extension PRUI.PRArticleContainerVC : PRUIKit.NavigationBarAppearanceProvider {
  @_Concurrency.MainActor @preconcurrency public var standartNavigatioBarAppearanceType: UIKit.UINavigationBarAppearance.BackgroundType {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var scrollEdgeNavigatioBarAppearanceType: UIKit.UINavigationBarAppearance.BackgroundType {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency final public class LibraryItemFeedVC : PRUI.CustomStyleableTextFlowVC {
  @_Concurrency.MainActor @preconcurrency @objc override final public class var layoutType: PRConfiguration.NTFLayoutType {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var mliDataSource: PRUI.NTFMyLibraryItemDataSource? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var dataSource: PRUI.NTFDataSource {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var articleCompactViewOptions: PRUI.NTFArticleCompactViewOption {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var actionMenuItems: [PRUIKit.PRMenuItem] {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var currentSectionMenuIndex: Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc override final public var translationMenuItem: PRUIKit.PRMenuItem? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override final public func setupDefaultValues()
  @_Concurrency.MainActor @preconcurrency @objc override final public func processSizeChange()
  @_Concurrency.MainActor @preconcurrency @objc override final public var navigationBarRightBarButtonItems: [UIKit.UIBarButtonItem]? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public var isAppMenuAllowed: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override final public func registerObservers()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(dataSource: PRUI.NTFDataSource?)
  @objc deinit
}
@objc public enum TranslationViewState : Swift.Int {
  case translating, translated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency final public class TranslationView : UIKit.UIControl {
  @objc @_Concurrency.MainActor @preconcurrency final public var translateState: PRUI.TranslationViewState {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var textColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var color: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency final public var bottomLineHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public init(state: PRUI.TranslationViewState)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override final public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override final public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
}
@objc extension PRUI.VerticalTextFlowArticleDetailsVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var navigationBarState: PRUI._PRNavigationBarState {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateReadAccess()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func updateRelatedArticles()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var shouldPresentTanslationHUD: Swift.Bool {
    @objc get
  }
}
extension PRUI.VerticalTextFlowArticleDetailsVC : PRUIKit.NavigationBarAppearanceProvider {
  @_Concurrency.MainActor @preconcurrency public var standartNavigatioBarAppearanceType: UIKit.UINavigationBarAppearance.BackgroundType {
    get
  }
}
extension PRUI.VerticalTextFlowArticleDetailsVC : PRUI.TextFlowUIStyleOserver {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func applyUIStyle()
}
@available(swift, obsoleted: 1.0)
extension PRUI.VerticalTextFlowArticleDetailsVC {
  @objc(registerUIStyleObserver) @_Concurrency.MainActor @preconcurrency dynamic public func _registerUIStyleObserver()
  @objc(unregisterUIStyleObserver) @_Concurrency.MainActor @preconcurrency dynamic public func _unregisterUIStyleObserver()
}
extension PRUI.VerticalTextFlowArticleDetailsVC : PRUIKit.ActivityPresenter {
  public typealias ActivityVC = PRUI.TextFlowActivityVC
}
@available(swift, obsoleted: 1.0)
extension PRUI.VerticalTextFlowArticleDetailsVC {
  @objc(showActivityIndicator) @_Concurrency.MainActor @preconcurrency dynamic public func _showActivityIndicator()
  @objc(hideActivityIndicator) @_Concurrency.MainActor @preconcurrency dynamic public func _hideActivityIndicator()
}
@objc extension PRUI.PROrderView {
  @objc @_Concurrency.MainActor @preconcurrency public static var partnerBannerHeight: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency public static func partnerBannerStackView() -> UIKit.UIStackView
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class UniversalLayoutFeedVC : PRUI.PRVerticalFeedVC {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public class var layoutType: PRConfiguration.NTFLayoutType {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(dataSource: PRUI.NTFDataSource?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isCompact: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public var firstRowTopInset: Foundation.NSNumber {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class EmptyResultView : UIKit.UIView {
  @objc deinit
}
@objc extension PRUI.PRDownloadedVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func showPlaceholderView()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func hidePlaceholderView()
}
@objc extension PRUI.PRCatalogFilterPanelVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func setupCell(_ cell: PRUI.PRCatalogFilterTableCell, item: any PRAPI.CatalogNavigationVariant)
}
extension PRUI.PRiphoneAppDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func processLaunchEnvironment()
}
@objc @objcMembers final public class PurchaseConfirmation : ObjectiveC.NSObject {
  @objc final public let title: Swift.String
  @objc final public let footnote: Swift.String?
  @objc final public let warning: Swift.String?
  @objc final public let issue: PRAPI.PRTitleItemExemplar?
  @objc final public let proceedButtonTitle: Swift.String?
  @objc final public let cancelButtonTitle: Swift.String?
  @objc final public let proceedHandler: (() -> ())?
  @objc public init(title: Swift.String, footnote: Swift.String?, warning: Swift.String?, issue: PRAPI.PRTitleItemExemplar?, proceedButtonTitle: Swift.String?, cancelButtonTitle: Swift.String?, proceedHandler: (() -> ())? = nil)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SubscriptionCancellationAdvisory : ObjectiveC.NSObject {
  @objc final public let text: Swift.String?
  @objc final public let warning: Swift.String?
  @objc deinit
}
@objc extension PRUI.PROrderDelivery {
  @objc dynamic public func subscriptionCancellationAdvisory(inferiorBundles: [PRAPI.PRUserBundle]) -> PRUI.SubscriptionCancellationAdvisory?
}
@objc extension PRUI.PRLibraryItemsCollectionVC {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func refreshBooks()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func downloadItem(_ item: PRCatalogModel.CatalogItem)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func onCatalogPreloaded(_ notification: Foundation.Notification)
}
extension PRUI.PressReader {
  public enum LogError : Foundation.LocalizedError {
    case linkToUploadedFileIsNotAvailable
    public static func == (a: PRUI.PressReader.LogError, b: PRUI.PressReader.LogError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public func getLogs(completion: @escaping (_ result: Swift.Result<(linkToUploadedLogs: Foundation.URL, additionalInfo: Swift.String), any Swift.Error>) -> Swift.Void)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func getLogs() async throws -> Foundation.URL
}
@objc extension PRUI.PhotoGalleryVC : PRAPI.RichMediaPhotoAnalyticsProvider {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var mediaType: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var issue: (any PRAPI.IssueAnalyticsProvider)? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var mediaTitle: Swift.String? {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var photoIndex: Swift.Int {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var photosCount: Swift.Int {
    @objc get
  }
  @objc @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency dynamic public func _trackRichMedia(action: PRAnalytics.RMTAction)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func trackRichMediaEventPlaying(_ playing: Swift.Bool)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class ReadingVC : PRUIKit.PRUINavigationController {
  @_Concurrency.MainActor @preconcurrency public init?(_ item: any PRAPI.PRCatalogItem)
  @_Concurrency.MainActor @preconcurrency @objc override final public var modalPresentationStyle: UIKit.UIModalPresentationStyle {
    @objc get
    @objc set
  }
  @objc deinit
}
extension PRUI.PRBannerPresentationConfig {
  @objc dynamic public var hasAnySuggestions: Swift.Bool {
    @objc get
  }
  @objc dynamic public func suggest(_ type: PRConfiguration.PRBannerType) -> Swift.Bool
  public func isSingleBannerType(_ type: PRConfiguration.PRBannerType) -> Swift.Bool
}
@objc extension PRUI.PRAppMenu {
  @objc public static let itemAnalyticsIdKey: Swift.String
  @objc public static let itemAccessibilityIdKey: Swift.String
  @objc public static let itemTitleKey: Swift.String
  @objc public static let itemIconKey: Swift.String
  @objc public static let itemURLKey: Swift.String
  @objc public static let itemIsFoldedKey: Swift.String
  @objc dynamic public var homeMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var favoritesMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var catalogMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var downloadedMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var bookmarksMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var signInMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var moreMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var myAccountMoreMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var settingsMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var subscriptionsMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var sendFeedbackMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var customerSupportMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var webViewMenuItemInfo: [Swift.String : Any] {
    @objc get
  }
  @objc dynamic public var itemsTypes: [[PRUI.PRAppMenuItemType]]? {
    @objc get
  }
  @objc dynamic public func exitSDKMenuItem() -> PRUIKit.PRMenuItem?
  @objc dynamic public func appMenuItems(info: [PRUI.AppMenuItemInfo]) -> [PRUIKit.PRMenuItem]
  @objc dynamic public func defaultImageName(type: PRUI.PRAppMenuItemType) -> Swift.String?
}
final public class StoriesSearchDataSource : PRAPI.PRObservableObject<any PRAPI.DataSourceObserver>, PRUI.SearchableDataSource {
  final public let articleDataSource: PRUI.NTFArticlesSearchDataSource
  final public var state: PRAPI.DataSourceState {
    get
  }
  public init(dataSource: PRUI.NTFArticlesSearchDataSource)
  final public var searchText: Swift.String {
    get
    set
  }
  final public var availableSortOptions: [PRUI.SearchableDataSourceSortingOrder] {
    get
  }
  final public var sortingOption: PRUI.SearchableDataSourceSortingOrder {
    get
    set
  }
  final public var isOngoingSearchSupported: Swift.Bool {
    get
  }
  @objc final public var loadingError: (any Swift.Error)? {
    @objc get
  }
  @objc final public var canLoadMore: Swift.Bool {
    @objc get
  }
  @objc final public var isEmpty: Swift.Bool {
    @objc get
  }
  @objc final public var isLoading: Swift.Bool {
    @objc get
  }
  @objc final public var isFailed: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc final public func load() -> Swift.Bool
  @discardableResult
  @objc final public func loadMore() -> Swift.Bool
  @objc deinit
}
@objc extension PRUI.PRArticleContainerVC : PRAds.AdDataSourceDelegate {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var adDataSource: PRAds.AdDataSource? {
    @objc get
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func loadAndPresentBanners()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func presentInterstitialAds()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentFixedAds(_ ads: [PRAds.AdBannerPresentation]?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentInterstitialAds(_ ads: [PRAds.AdBannerPresentation]?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentEmbedableAds(_ ads: [PRAds.AdBannerPresentation]?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adChangeHandler(_ ad: PRAds.AdBannerPresentation)
}
@_inheritsConvenienceInitializers @objc final public class Regular3CFeedLayoutItem : PRUI.AbstractFeedLayoutItem {
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class CommandShowPurchaseConfirmation : ObjectiveC.NSObject {
  @objc final public class func execute(title: Swift.String)
  @objc final public class func execute(title: Swift.String, footnote: Swift.String?)
  @objc final public class func execute(confirmation: PRUI.PurchaseConfirmation)
  @objc final public class func execute(title: Swift.String, footnote: Swift.String?, warning: Swift.String?, issue: PRAPI.PRTitleItemExemplar?, proceedButtonTitle: Swift.String?, cancelButtonTitle: Swift.String?, proceedHandler: (() -> ())?, cancelHandler: (() -> ())?)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRConfiguration.UserInterfaceStyleConfig {
  @objc @available(swift, obsoleted: 1.0)
  final public var textFlowStyleTitle: Swift.String {
    @objc get
  }
  @objc @available(swift, obsoleted: 1.0)
  final public var preferredStyleTitle: Swift.String {
    @objc get
  }
}
@objc extension PRAPI.PRCatalogSection {
  @objc dynamic public var dataSource: (any PRAPI.CatalogItemDataSourceProtocol)? {
    @objc get
    @objc set
  }
  @objc dynamic public var isEmpty: Swift.Bool {
    @objc get
  }
  @objc dynamic public var count: Swift.Int {
    @objc get
  }
  @objc dynamic public var representsTitleItemExemplars: Swift.Bool {
    @objc get
  }
}
@objc extension PRAPI.PRCatalogSection {
  @objc dynamic public var entity: PRCatalogModel.CatalogEntity? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers final public class SignInUIPreferences : ObjectiveC.NSObject {
  final public var hideBackButton: Swift.Bool?
  final public var showSkipButton: Swift.Bool?
  final public var isMandatory: Swift.Bool?
  final public var mode: PRUI.PRAuthorizeVCMode
  @objc convenience override dynamic public init()
  @objc public init(hideBackButton: Swift.Bool, showSkipButton: Swift.Bool, isMandatory: Swift.Bool, mode: PRUI.PRAuthorizeVCMode)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class CommandShowSignInOptions : ObjectiveC.NSObject, PRUI.PRExecutable {
  @discardableResult
  @objc final public class func execute(presenter: UIKit.UIViewController?, preferences: PRUI.SignInUIPreferences?) -> UIKit.UIViewController?
  @objc public static func execute()
  @objc override dynamic public init()
  @objc deinit
}
extension PRCatalogModel.Query : PRUI.SearchableDataSource {
  public var searchText: Swift.String {
    get
    set
  }
}
@_hasMissingDesignatedInitializers final public class PRExternalLinkAccountManager {
  public static var isEnabled: Swift.Bool {
    get
  }
  final public func present()
  final public func push(into nc: UIKit.UINavigationController)
  @objc deinit
}
extension PRUI.NTFSmartArticleDataItem : PRAPI.MastheadProvider {
  @objc dynamic public var hasMasthead: Swift.Bool {
    @objc get
  }
  @objc dynamic public func masthead(height: CoreFoundation.CGFloat, style: UIKit.UIUserInterfaceStyle, handler: @escaping PRThumbnail.PRThumbnailHandler)
}
public protocol TextFlowUIStyleOserver : PRUI.UIStyleOserver {
}
extension PRUI.TextFlowUIStyleOserver {
  public var valueSubject: Combine.CurrentValueSubject<UIKit.UIUserInterfaceStyle, Swift.Never> {
    get
  }
}
extension PRUI.PRPubHubDataSource {
  @objc dynamic public var accountManager: PRAPI.PRAccountManager? {
    @objc get
  }
  @objc dynamic public var defaultAccount: PRAPI.PRAccountItem? {
    @objc get
  }
  @objc dynamic public var isLocalServiceOn: Swift.Bool {
    @objc get
  }
  @objc dynamic public func catalogSectionDataSource(scheme: PRAPI.CatalogSectionScheme) -> (any PRAPI.CatalogItemDataSourceProtocol & PRAPI.SectionDataSourceProtocol)?
  @objc dynamic public func catalogSectionDataSource(entityId: Swift.String) -> (any PRAPI.CatalogItemDataSourceProtocol & PRAPI.SectionDataSourceProtocol)?
  @objc dynamic public func updatePublicationCategoriesSectionContentWidth()
  @objc dynamic public func contentCategoriesSection(scheme: PRAPI.CatalogSectionScheme) -> PRAPI.PRCatalogSection?
  @objc dynamic public func recentlyReadSection(scheme: PRAPI.CatalogSectionScheme, list: [PRAPI.PRTitleItemExemplar], index: Swift.Int) -> PRAPI.PRCatalogSection
  @objc dynamic public func coBrandingSection() -> PRAPI.PRCatalogSection?
  @objc dynamic public func latestPublishDaySection(scheme: PRAPI.CatalogSectionScheme, index: Swift.Int) -> PRAPI.PRCatalogSection?
}
@objc extension PRUI.PRMenuBottomBar {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addThumbToMenuBar(tapHandler: @escaping (PRUI.PRArticleIssueThumbnail) -> ()) -> PRUI.PRArticleIssueThumbnail
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency final public class PRHiddenWhenEmptyImageView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency @objc override final public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ActionAccessParameters : ObjectiveC.NSObject {
  @objc final public var pageNo: Swift.Int
  @objc final public var isSingleArticle: Swift.Bool
  @objc final public var isPDF: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol ActionAccessControllable {
  @objc func isActionAllowed(_ actionType: PRUI.ActionType, parameters: PRUI.ActionAccessParameters?) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class SettingsTableFooterView : PRUIKit.SimpleTitleHeaderFooterView {
  @_Concurrency.MainActor @preconcurrency final public var titleLabelTapHandler: (() -> ())?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc deinit
}
extension PRUI.AutoTranslationActor : Swift.Sendable {}
extension PRUI.Account.State : Swift.Equatable {}
extension PRUI.Account.State : Swift.Hashable {}
extension PRUI.Account.State : Swift.RawRepresentable {}
extension PRUI.ArticlePopoverContainerVC.AppearanceType : Swift.Equatable {}
extension PRUI.ArticlePopoverContainerVC.AppearanceType : Swift.Hashable {}
extension PRUI.ArticlePopoverContainerVC.AppearanceType : Swift.RawRepresentable {}
extension PRUI.PRSlidePresentDismissActor : Swift.Sendable {}
extension PRUI.CommandOpenBookCatalog : Swift.Sendable {}
extension PRUI.PopoverPresentationController : Swift.Sendable {}
extension PRUI.ActionType : Swift.Equatable {}
extension PRUI.ActionType : Swift.Hashable {}
extension PRUI.ActionType : Swift.RawRepresentable {}
extension PRUI.DownloadState : Swift.Equatable {}
extension PRUI.DownloadState : Swift.Hashable {}
extension PRUI.PRAlertActionType : Swift.Equatable {}
extension PRUI.PRAlertActionType : Swift.Hashable {}
extension PRUI.PRAlertActionType : Swift.RawRepresentable {}
extension PRUI.CommandNavigateBooks : Swift.Sendable {}
extension PRUI.PaymentOptionsMode : Swift.Equatable {}
extension PRUI.PaymentOptionsMode : Swift.Hashable {}
extension PRUI.PaymentOptionsMode : Swift.RawRepresentable {}
extension PRUI.SearchableDataSourceSortingOrder : Swift.Equatable {}
extension PRUI.SearchableDataSourceSortingOrder : Swift.Hashable {}
extension PRUI.PremiumBannerView.Style : Swift.Equatable {}
extension PRUI.PremiumBannerView.Style : Swift.Hashable {}
extension PRUI.AutoTranslationActor.AutoTranslationError : Swift.Equatable {}
extension PRUI.AutoTranslationActor.AutoTranslationError : Swift.Hashable {}
extension PRUI.TranslationViewState : Swift.Equatable {}
extension PRUI.TranslationViewState : Swift.Hashable {}
extension PRUI.TranslationViewState : Swift.RawRepresentable {}
extension PRUI.PressReader.LogError : Swift.Equatable {}
extension PRUI.PressReader.LogError : Swift.Hashable {}
