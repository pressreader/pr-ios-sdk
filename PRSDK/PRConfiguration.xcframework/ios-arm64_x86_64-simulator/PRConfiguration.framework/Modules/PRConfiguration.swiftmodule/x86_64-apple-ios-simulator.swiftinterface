// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name PRConfiguration
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Combine
import CoreData
import Foundation
@_exported import PRConfiguration
import PRDIContainer
import PRSyntacticSugar
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers final public class UserConsentConfig : ObjectiveC.NSObject {
  @objc final public var privacyPolicyURL: Swift.String? {
    @objc get
  }
  @objc final public var shouldAskForConsent: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SearchConfig : ObjectiveC.NSObject {
  @objc @PRDIContainer.Inject final public var global: PRConfiguration.GlobalSearchConfig? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class GlobalSearchConfig : ObjectiveC.NSObject {
  @objc final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isOngoingStoriesSearchEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class PRConfigKey : ObjectiveC.NSObject {
  @objc deinit
}
extension PRConfiguration.PRConfigKey {
  public static let autoTranslation: PRConfiguration.AutoTranslationConfigKey
}
public struct AutoTranslationConfigKey {
  public let zones: PRConfiguration.PRConfigKey
  public let pairsLimit: PRConfiguration.PRConfigKey
}
@_hasMissingDesignatedInitializers final public class MarfeelAnalyticsConfigKey {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ExternalLinkAccountConfig : ObjectiveC.NSObject {
  @objc public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc public var developerName: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ComScoreAnalyticsConfig : ObjectiveC.NSObject {
  @objc public var publisherId: Swift.String? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct CoBrandingConfig {
  public struct Area : Swift.OptionSet {
    public static let catalog: PRConfiguration.CoBrandingConfig.Area
    public static let issueDetails: PRConfiguration.CoBrandingConfig.Area
    public static let bookDetails: PRConfiguration.CoBrandingConfig.Area
    public static let textFlow: PRConfiguration.CoBrandingConfig.Area
    public static let article: PRConfiguration.CoBrandingConfig.Area
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = PRConfiguration.CoBrandingConfig.Area
    public typealias Element = PRConfiguration.CoBrandingConfig.Area
    public typealias RawValue = Swift.Int
  }
  public var area: PRConfiguration.CoBrandingConfig.Area {
    get
  }
}
@objc extension PRConfiguration.PROrderConfig {
  @objc dynamic public var typeSpecificTextForDatePicker: Swift.Bool {
    @objc get
  }
}
@objc extension PRConfiguration.PROnboardingConfig {
  @objc dynamic public var showTrialSubscriptionIntro: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isSignInDisabled: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isPublicationSearchEnabled: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers final public class BookConfig : ObjectiveC.NSObject {
  final public var isEnabled: Swift.Bool {
    get
  }
  @objc final public var ePubReader: Swift.AnyClass? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SplashScreenConfig : ObjectiveC.NSObject {
  @objc final public var isPoweredByImageEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var animatedLogo: PRConfiguration.SplashScreenAnimatedLogoConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SplashScreenAnimatedLogoConfig : ObjectiveC.NSObject {
  @objc final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isSpecial: Swift.Bool {
    @objc get
  }
  @objc final public var progress: CoreFoundation.CGFloat {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class SpoorAnalyticsConfig : ObjectiveC.NSObject {
  final public let productName: Swift.String
  final public let systemSource: Swift.String
  final public var isEnabled: Swift.Bool {
    get
  }
  final public var spoorBaseUrl: Foundation.URL? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class MarfeelAnalyticsConfig : ObjectiveC.NSObject {
  @objc @_inheritsConvenienceInitializers final public class UserType : ObjectiveC.NSObject {
    final public var userAccess4Bundle: Swift.Int {
      get
    }
    @objc override dynamic public init()
    @objc deinit
  }
  final public let userType: PRConfiguration.MarfeelAnalyticsConfig.UserType
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PRCatalogSectionType : Swift.Int {
  case begin = -2
  case none
  case featured
  case filters
  case listen
  case favorites
  case recentlyRead
  case linkedService
  case topMagazines
  case topNewspapers
  case books
  case justAdded
  case newReleases
  case topFree
  case downloaded
  case latestIssues
  case bannerBegin
  case bannerHotspotServices
  case bannerPremiumSubscription
  case bannerImproveExperience
  case bannerPersonalizationCompleted
  case bannerBooks
  case bannerBrazeContentCard
  case bannerAll
  case bannerEnd
  case categories
  case fullCatalog
  case categoryContent
  case sections
  case hotSpot
  case latestPublishDay
  case topAdBanner
  case inlineAdBanner
  case coBrandingBanner
  case end
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PRConfiguration.PRCatalogConfig {
  @objc dynamic public var books: PRConfiguration.BookConfig? {
    @objc get
  }
  @objc dynamic public var localPromotionsCount: Swift.Int {
    @objc get
  }
  @objc dynamic public var isFreeIndicatorEnabled: Swift.Bool {
    @objc get
  }
  public func isModernAPISupported(by section: PRConfiguration.PRCatalogSectionType) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @objcMembers public class DirectExternalLinkAccountConfig : ObjectiveC.NSObject {
  @objc public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc public var link: Foundation.URL? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class RadioConfig : ObjectiveC.NSObject {
  @objc final public var featured: PRConfiguration.FeaturedRadioConfig? {
    @objc get
  }
  @objc final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FeaturedRadioConfig : ObjectiveC.NSObject {
  public var isEnabled: Swift.Bool {
    get
  }
  public var locale: Swift.String? {
    get
  }
  public var articleCount: Swift.UInt {
    get
  }
  public var articleSearchDepth: Swift.UInt {
    get
  }
  public var showDuration: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum ArticleGalleryCaptionPosition : Swift.Int {
  case automatic = 0
  case underImage
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class PRArticleConfig : ObjectiveC.NSObject {
  @objc final public let tags: PRConfiguration.ArticleTagsConfig
  @objc final public let related: PRConfiguration.ArticleRelatedConfig
  @objc final public let details: PRConfiguration.ArticleDetailsViewConfig
  @objc final public let byline: PRConfiguration.ArticleBylineConfig
  @objc final public var hasSimilars: Swift.Bool {
    @objc get
  }
  @objc final public var hasComments: Swift.Bool {
    @objc get
  }
  @objc final public var canComment: Swift.Bool {
    @objc get
  }
  @objc final public var hasVotes: Swift.Bool {
    @objc get
  }
  @objc final public var isAuthRequiredToListen: Swift.Bool {
    @objc get
  }
  @objc final public var isAuthRequiredToPrint: Swift.Bool {
    @objc get
  }
  @objc final public var selectBestFrontImage: Swift.Bool {
    @objc get
  }
  @objc final public var isHyphenationEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isListeningEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var imageScaleAPILimit: Swift.Double {
    @objc get
  }
  @objc final public var imageScaleLimit: Swift.Double {
    @objc get
    @objc set
  }
  @objc final public var imageScaleThreshold: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var isLargePreviewForVideoAllowed: Swift.Bool {
    @objc get
  }
  @objc final public var galleryCaptionPosition: PRConfiguration.ArticleGalleryCaptionPosition {
    @objc get
  }
  @objc final public var numberOfLinesForPreview: Swift.Int {
    @objc get
  }
  final public var previewTextDarkColor: Swift.UInt? {
    get
  }
  @objc final public var mastheadEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticleTagsConfig : ObjectiveC.NSObject {
  @objc final public var enabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticleRelatedConfig : ObjectiveC.NSObject {
  @objc final public var enabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticleDetailsViewConfig : ObjectiveC.NSObject {
  @objc final public let preferredImage: PRConfiguration.ArticleDetailsPreferredImageConfig
  @objc final public let title: PRConfiguration.ArticleDetailsTitleConfig
  @objc final public var lightBackgroundColor: Swift.UInt {
    @objc get
  }
  @objc final public var textAlignment: UIKit.NSTextAlignment {
    @objc get
  }
  @objc final public var presentInPopover: Swift.Bool {
    @objc get
  }
  @objc final public var presentRadioOnTop: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticleDetailsPreferredImageConfig : ObjectiveC.NSObject {
  @objc final public let caption: PRConfiguration.ArticleDetailsPreferredImageCaptionConfig
  @objc final public var largeLayoutEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticleDetailsPreferredImageCaptionConfig : ObjectiveC.NSObject {
  @objc final public var numberOfLines: Swift.Int {
    @objc get
  }
  @objc final public var alignment: UIKit.NSTextAlignment {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticleBylineConfig : ObjectiveC.NSObject {
  final public var darkColor: Swift.UInt? {
    get
  }
  final public var lightColor: Swift.UInt? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticleDetailsTitleConfig : ObjectiveC.NSObject {
  final public var lightColor: Swift.UInt? {
    get
  }
  @objc final public var textAlignment: UIKit.NSTextAlignment {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct KeyValueStoreKey : Swift.RawRepresentable {
  public var rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public protocol KeyValueStore {
  func data(forKey defaultName: Swift.String) -> Foundation.Data?
  func set(_ value: Any?, forKey defaultName: Swift.String)
  func bool(forKey defaultName: Swift.String) -> Swift.Bool
  func set(_ value: Swift.Bool, forKey defaultName: Swift.String)
  func double(forKey defaultName: Swift.String) -> Swift.Double
  func set(_ value: Swift.Double, forKey defaultName: Swift.String)
  func string(forKey defaultName: Swift.String) -> Swift.String?
  func dictionary(forKey defaultName: Swift.String) -> [Swift.String : Any]?
}
extension PRConfiguration.KeyValueStore {
  public func data(forKey defaultName: PRConfiguration.KeyValueStoreKey) -> Foundation.Data?
  public func set(_ value: Any?, forKey defaultName: PRConfiguration.KeyValueStoreKey)
  public func bool(forKey defaultName: PRConfiguration.KeyValueStoreKey) -> Swift.Bool
  public func set(_ value: Swift.Bool, forKey defaultName: PRConfiguration.KeyValueStoreKey)
  public func double(forKey defaultName: PRConfiguration.KeyValueStoreKey) -> Swift.Double
  public func set(_ value: Swift.Double, forKey defaultName: PRConfiguration.KeyValueStoreKey)
  public func string(forKey defaultName: PRConfiguration.KeyValueStoreKey) -> Swift.String?
  public func dictionary(forKey defaultName: PRConfiguration.KeyValueStoreKey) -> [Swift.String : Any]?
  public func object<T>(forKey key: PRConfiguration.KeyValueStoreKey) throws -> T? where T : Swift.Decodable
  public func object<T>(forKey key: Swift.String) throws -> T? where T : Swift.Decodable
  public func setObject<T>(_ object: T?, forKey key: PRConfiguration.KeyValueStoreKey) throws where T : Swift.Encodable
  public func setObject<T>(_ object: T?, forKey key: Swift.String) throws where T : Swift.Encodable
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class UserInterfaceStyleConfig : PRConfiguration.Config {
  final public var preferred: Combine.CurrentValueSubject<UIKit.UIUserInterfaceStyle, Swift.Never> {
    get
  }
  final public var textFlow: Combine.CurrentValueSubject<UIKit.UIUserInterfaceStyle, Swift.Never> {
    get
  }
  final public var articleDetails: UIKit.UIUserInterfaceStyle {
    get
  }
  @objc final public var isUIStyleSelectionEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isTextFlowStyleSelectionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  final public var textFlowStyles: [UIKit.UIUserInterfaceStyle] {
    get
  }
  final public var isLogoAlwaysOriginal: Swift.Bool {
    get
  }
  @objc deinit
}
public struct AppsFlyerConfig {
  public struct OneLinkConfig {
    public var brandDomain: Swift.String? {
      get
    }
    public var templateId: Swift.String? {
      get
    }
    public var sharingEnabled: Swift.Bool {
      get
    }
    public var desktopUrl: Swift.String? {
      get
    }
  }
  public var devKey: Swift.String? {
    get
  }
  public var appId: Swift.String? {
    get
  }
  public var oneLink: PRConfiguration.AppsFlyerConfig.OneLinkConfig
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ReadingAnalyticsConfig : ObjectiveC.NSObject {
  @objc final public var frameDebounce: Foundation.TimeInterval {
    @objc get
  }
  @objc final public var frameDurationThreshold: Foundation.TimeInterval {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.UserDefaults : PRConfiguration.KeyValueStore {
}
extension Foundation.NSUbiquitousKeyValueStore : PRConfiguration.KeyValueStore {
}
public struct PRUbiquitousKeyValueStore {
  public static var store: any PRConfiguration.KeyValueStore {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class MigrationConfig : ObjectiveC.NSObject {
  @objc final public var bookLibraryMigrated: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var bookReadingPositionsMigrated: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AccountConfig : ObjectiveC.NSObject {
  @objc final public var showAccountVCEditBarButton: Swift.Bool {
    @objc get
  }
  @objc final public var showAccountChangeEmailPermissionSection: Swift.Bool {
    @objc get
  }
  @objc final public var showAccountProductSection: Swift.Bool {
    @objc get
  }
  @objc final public var showAccountDetailSection: Swift.Bool {
    @objc get
  }
  @objc final public var showAccountVCNicknameRow: Swift.Bool {
    @objc get
  }
  @objc final public var showAccountVCServiceName: Swift.Bool {
    @objc get
  }
  @objc final public let delete: PRConfiguration.AccountDeleteConfig
  @objc final public let termsOfUse: PRConfiguration.TermsOfUseConfig
  @objc(deviceAccount) final public let device: PRConfiguration.DeviceAccountConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AccountDeleteConfig : ObjectiveC.NSObject {
  @objc final public var recipientEmail: Swift.String? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class TermsOfUseConfig : ObjectiveC.NSObject {
  @objc final public var isUserConfirmationRequired: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class DeviceAccountConfig : ObjectiveC.NSObject {
  @objc final public var bookmarksEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class HomeConfig : ObjectiveC.NSObject {
  @objc final public let sources: PRConfiguration.HomeSourcesConfig
  @objc final public let feed: PRConfiguration.HomeFeedConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class HomeSourcesConfig : ObjectiveC.NSObject {
  @objc final public var displayFavoriteIssues: Swift.Bool {
    @objc get
  }
  @objc final public var isDisabled: Swift.Bool {
    @objc get
  }
  @objc final public var issueAmount: Swift.Int {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class HomeFeedConfig : ObjectiveC.NSObject {
  @objc final public var navigation: PRConfiguration.FeedNavigation {
    @objc get
  }
  @objc final public let relatedArticles: PRConfiguration.RelatedArticlesConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class FeedNavigation : PRSyntacticSugar.PROptionSet {
  @objc public static let button: PRConfiguration.FeedNavigation
  @objc public static let tabs: PRConfiguration.FeedNavigation
  @objc required public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = PRConfiguration.FeedNavigation
  public typealias Element = PRConfiguration.FeedNavigation
  public typealias RawValue = Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class RelatedArticlesConfig : ObjectiveC.NSObject {
  @objc final public var thumbnailsEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public struct BrazeConfig {
  public var isEmailSubscriptionEditEnabled: Swift.Bool {
    get
  }
  public var logLevel: Swift.UInt8 {
    get
  }
}
extension PRConfiguration.PRConfig {
  @objc dynamic public class var isFullUILoaded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc(radioConfig) dynamic public class var radio: PRConfiguration.RadioConfig? {
    @objc get
  }
  @objc(cancellationAdvisoryConfig) dynamic public class var cancellationAdvisory: PRConfiguration.CancellationAdvisoryConfig? {
    @objc get
  }
  @objc(splashScreenConfig) dynamic public class var splashScreen: PRConfiguration.SplashScreenConfig? {
    @objc get
  }
  @objc(bookReaderConfig) dynamic public class var bookReader: PRConfiguration.BookReaderConfig? {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class LocalServerConfig : ObjectiveC.NSObject {
  @objc final public var serverURL: Swift.String? {
    @objc get
  }
  @objc final public var cleanDownloadedContentAfterDeauthorization: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class HotSpotConfig : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc(HotSpotNotificationsConfig) @objcMembers final public class NotificationsConfig : ObjectiveC.NSObject {
    @_inheritsConvenienceInitializers @objc(HotSpotLocalNotificationsConfig) @objcMembers final public class LocalConfig : ObjectiveC.NSObject {
      @objc final public var timeInterval: Foundation.TimeInterval {
        @objc get
      }
      @objc final public var requestReminderTimeInterval: Foundation.TimeInterval {
        @objc get
      }
      @objc final public var showOnSwitch: Swift.Bool {
        @objc get
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(HotSpotWelcomeNotificationsConfig) @objcMembers final public class WelcomeConfig : ObjectiveC.NSObject {
      @objc final public var timeInterval: Foundation.TimeInterval {
        @objc get
      }
      @objc final public var showOnSwitch: Swift.Bool {
        @objc get
      }
      @objc final public var showOnStart: Swift.Bool {
        @objc get
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc final public let local: PRConfiguration.HotSpotConfig.NotificationsConfig.LocalConfig
    @objc final public let welcome: PRConfiguration.HotSpotConfig.NotificationsConfig.WelcomeConfig
    @objc final public var isEnabled: Swift.Bool {
      @objc get
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isMapEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isCupButtonEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isOptOut: Swift.Bool {
    @objc get
  }
  @objc final public var proximityUUID: Swift.String {
    @objc get
  }
  @objc final public var isGeoFencingEnabled: Swift.Bool {
    @objc get
  }
  @objc final public let notifications: PRConfiguration.HotSpotConfig.NotificationsConfig
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Bundle {
  @objc dynamic public var version: Swift.String {
    @objc get
  }
  @objc dynamic public var shortVersion: Swift.String {
    @objc get
  }
  public var majorVersion: Swift.String {
    get
  }
  @objc dynamic public var extendedVersion: Swift.String {
    @objc get
  }
  @objc dynamic public var conditionalVersion: Swift.String {
    @objc get
  }
  @objc dynamic public var identifier: Swift.String? {
    @objc get
  }
  @objc dynamic public var displayName: Swift.String? {
    @objc get
  }
}
extension Foundation.UserDefaults {
  @objc(sharedUserDefaults) dynamic public class var shared: Foundation.UserDefaults? {
    @objc get
  }
  @objc dynamic public var accessToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public var baseServices: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  public var deepLinkScheme: Swift.String? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class CancellationAdvisoryConfig : ObjectiveC.NSObject {
  @objc final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CoreDataConfig : ObjectiveC.NSObject {
  @objc public var storeType: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRConfiguration.AnalyticsConfig {
  @objc public static func registerDependencies()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GlobalPrintConfig : ObjectiveC.NSObject {
  @objc public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class PagePrintConfig : PRConfiguration.GlobalPrintConfig {
  @objc override final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var limitPerIssue: Swift.Int {
    @objc get
  }
  @objc final public var useBitmap: Swift.Bool {
    @objc get
  }
  @objc final public var bitmapScale: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var isUnlimited: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticlePrintConfig : PRConfiguration.GlobalPrintConfig {
  @objc override final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isGraphicsEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class PrintConfig : PRConfiguration.GlobalPrintConfig {
  @objc final public let page: PRConfiguration.PagePrintConfig
  @objc final public let article: PRConfiguration.ArticlePrintConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class Auth0Config : ObjectiveC.NSObject {
  final public var clientId: Swift.String? {
    get
  }
  final public var domain: Swift.String? {
    get
  }
  final public var useIdToken: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension PRConfiguration.PRConfig {
  @objc(externalLinkAccountConfig) @PRDIContainer.Inject public static var externalLinkAccount: PRConfiguration.ExternalLinkAccountConfig? {
    @objc get
  }
  @objc(migrationConfig) @PRDIContainer.Inject public static var migration: PRConfiguration.MigrationConfig? {
    @objc get
  }
  @objc(attConfig) @PRDIContainer.Inject public static var att: PRConfiguration.ATTConfig? {
    @objc get
  }
  @objc(printConfig) @PRDIContainer.Inject public static var print: PRConfiguration.PrintConfig? {
    @objc get
  }
  @objc(accountConfig) @PRDIContainer.Inject public static var account: PRConfiguration.AccountConfig? {
    @objc get
  }
  public static let coBranding: PRConfiguration.CoBrandingConfig
  @objc(hotSpotConfig) @PRDIContainer.Inject public static var hotSpot: PRConfiguration.HotSpotConfig? {
    @objc get
  }
  public static let appsFlyer: PRConfiguration.AppsFlyerConfig
  @objc(appInfoConfig) public static var appInfo: PRConfiguration.AppInfoConfig
  public static let braze: PRConfiguration.BrazeConfig
  @objc(directExternalLinkAccountConfig) public static let directExternalLinkAccount: PRConfiguration.DirectExternalLinkAccountConfig
  @objc public static var showTestServer: Swift.Bool {
    @objc get
    @objc set
  }
}
extension PRConfiguration.PRConfig {
  public static func bool(forKey key: PRConfiguration.PRConfigKey, defaultValue: Swift.Bool) -> Swift.Bool
  public static func set(_ value: Swift.Bool, forKey: PRConfiguration.PRConfigKey)
  public static func value(forKey key: PRConfiguration.PRConfigKey, defaultValue: Any? = nil) -> Any?
  public static func integer(forKey key: PRConfiguration.PRConfigKey, defaultValue: Swift.Int) -> Swift.Int
  public static func set(_ value: Swift.Int, forKey key: PRConfiguration.PRConfigKey)
  public static func double(forKey key: PRConfiguration.PRConfigKey, defaultValue: Swift.Double) -> Swift.Double
  public static func string(forKey key: PRConfiguration.PRConfigKey, defaultValue: Swift.String? = nil) -> Swift.String?
  public static func string(forKey key: PRConfiguration.PRConfigKey, defaultValue: Swift.String) -> Swift.String
  public static func set(_ value: Swift.String?, forKey key: PRConfiguration.PRConfigKey)
}
extension PRConfiguration.PRConfig {
  @objc(adConfig) @PRDIContainer.Inject public static var ads: PRConfiguration.AdConfig? {
    @objc get
  }
  @objc(shareConfig) @PRDIContainer.Inject public static var share: PRConfiguration.ShareConfig? {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers final public class ReaderConfig : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRConfiguration.ReaderConfig {
  @objc final public var hasFavourites: Swift.Bool {
    @objc get
  }
  @objc final public var hasBookmarks: Swift.Bool {
    @objc get
  }
  @objc final public var hasSmartSearch: Swift.Bool {
    @objc get
  }
  @objc final public var isTextViewFlowAllowed: Swift.Bool {
    @objc get
  }
  @objc final public var shouldReplicaHideTitle: Swift.Bool {
    @objc get
  }
  @objc final public var isTextViewSelectCopyAllowed: Swift.Bool {
    @objc get
  }
  @objc final public var nativeSharingSelectedOnly: Swift.Bool {
    @objc get
  }
  @objc final public var isDropcapEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isHighligtingEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isSmartZoomEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isFullScreenDisabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var barsHidingDelay: Swift.Double {
    @objc get
  }
  @objc final public var externalLinksEnabled: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers public class Config : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRConfiguration.FontConfig {
  @objc public static func registerDependencies()
}
@objc extension PRConfiguration.PRConfig {
  @objc public static func registerDependencies()
}
public enum WidgetKind : Swift.String, Swift.Codable, Swift.CaseIterable {
  case topStories
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PRConfiguration.WidgetKind]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [PRConfiguration.WidgetKind] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class MainMenuAnalyticsConfig : ObjectiveC.NSObject {
  @objc final public var forYouValue: Swift.String? {
    @objc get
  }
  @objc final public var browseValue: Swift.String? {
    @objc get
  }
  @objc final public var downloadedValue: Swift.String? {
    @objc get
  }
  @objc final public var accountsValue: Swift.String? {
    @objc get
  }
  @objc final public var aboutUsValue: Swift.String? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AdsType : PRSyntacticSugar.PROptionSet {
  @objc public static let html: PRConfiguration.AdsType
  @objc public static let google: PRConfiguration.AdsType
  @objc required public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = PRConfiguration.AdsType
  public typealias Element = PRConfiguration.AdsType
  public typealias RawValue = Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AdConfig : ObjectiveC.NSObject {
  @objc final public var simulateGoogleAds: Swift.Bool {
    @objc get
  }
  @objc final public var type: PRConfiguration.AdsType {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class FacebookConfig : ObjectiveC.NSObject {
  final public var appId: Swift.String? {
    get
  }
  final public var clientToken: Swift.String? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRConfiguration.PRAuthorizationConfig {
  @objc public static func registerDependencies()
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AnalyticsConfig : ObjectiveC.NSObject {
  @objc final public var userIdType: PRConfiguration.AnalyticsUserId {
    @objc get
  }
  @objc final public var replicaPageTrackingEnabled: Swift.Bool {
    @objc get
  }
  @objc final public let mainMenu: PRConfiguration.MainMenuAnalyticsConfig
  @objc(readingConfig) final public let reading: PRConfiguration.ReadingAnalyticsConfig
  @objc @PRDIContainer.Inject final public var firebase: PRConfiguration.FirebaseAnalyticsConfig? {
    @objc get
  }
  @objc @PRDIContainer.Inject final public var comScore: PRConfiguration.ComScoreAnalyticsConfig? {
    @objc get
  }
  @objc @PRDIContainer.Inject final public var treasureData: PRConfiguration.TreasureDataAnalyticsConfig? {
    @objc get
  }
  @objc @PRDIContainer.Inject final public var marfeel: PRConfiguration.MarfeelAnalyticsConfig? {
    @objc get
  }
  @objc @PRDIContainer.Inject final public var spoor: PRConfiguration.SpoorAnalyticsConfig? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AnalyticsUserId : PRSyntacticSugar.PROptionSet {
  @objc public static let accountNumber: PRConfiguration.AnalyticsUserId
  @objc public static let internalRefNumber: PRConfiguration.AnalyticsUserId
  @objc required public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = PRConfiguration.AnalyticsUserId
  public typealias Element = PRConfiguration.AnalyticsUserId
  public typealias RawValue = Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class BookReaderConfig : ObjectiveC.NSObject {
  public struct PurchaseSuggestionConfig {
    public var triggerPageFromEnd: Swift.Int {
      get
    }
  }
  @objc final public var locationDivider: Swift.Int {
    @objc get
  }
  @objc final public var defaultFontSize: Swift.Int {
    @objc get
  }
  @objc final public var isCopyButtonAvailable: Swift.Bool {
    @objc get
  }
  @objc final public var maxWordsInSelectionForLookup: Swift.Int {
    @objc get
  }
  @objc final public var isTextSpacingAvailable: Swift.Bool {
    @objc get
  }
  final public var purchaseSuggestion: PRConfiguration.BookReaderConfig.PurchaseSuggestionConfig
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class TreasureDataAnalyticsConfig : ObjectiveC.NSObject {
  @objc public var apiKey: Swift.String? {
    @objc get
  }
  @objc public var database: Swift.String {
    @objc get
  }
  @objc public var table: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc extension Foundation.NSLocale {
  @objc dynamic public func languageName(isoCode: Swift.String) -> Swift.String?
  @objc public static func hasCountry(forLocaleIdentifier localeIdentifier: Swift.String) -> Swift.Bool
  @objc public static func languageAndScript(fromLocaleIdentifier localeIdentifier: Swift.String) -> Swift.String
  @objc public static func canonicalValidatedLanguageIdentifier(fromComponents components: [Swift.String : Swift.String]) -> Swift.String
  @objc public static func canonicalValidatedLanguageIdentifier(from localeIdentifier: Swift.String) -> Swift.String
  @objc public static func validatedCurrentLanguageIdentifier() -> Swift.String
  @objc public static func currentLanguageAndScriptIdentifier() -> Swift.String
  @objc public static func validatedPreferredLanguageIdentifiers() -> [Swift.String]
  @objc public static func validatedPreferredLanguageIdentifier(matching languageIdentifier: Swift.String) -> Swift.String?
  @objc public static func validatedLanguageIdentifier(languageCode: Swift.String, countryCode: Swift.String?) -> Swift.String
  @objc dynamic public var validatedLanguageIdentifier: Swift.String {
    @objc get
  }
}
extension Foundation.Locale {
  public func languageName(isoCode: Swift.String) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers @objcMembers public class FirebaseAnalyticsConfig : ObjectiveC.NSObject {
  @objc public var isAnalyticsEnabled: Swift.Bool {
    @objc get
  }
  @objc public var isPushEnabled: Swift.Bool {
    @objc get
  }
  @objc public var userIdKey: Swift.String? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc final public class IAPConfig : ObjectiveC.NSObject {
  public enum SortingOrder : Swift.Int {
    case specificOnTop
    case generalOnTop
    case nonSubscriptionOnTop
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public var isSaveMoneyTextEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var decodeReceiptsLocaly: Swift.Bool {
    @objc get
  }
  final public var sortingOrder: PRConfiguration.IAPConfig.SortingOrder {
    get
  }
  @objc final public var isSelectProductEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isAccountRequired: Swift.Bool {
    @objc get
  }
  final public var restoreVersion: Swift.String? {
    get
  }
  final public var restoredVersion: Swift.String? {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRConfiguration.PROrderConfig {
  @objc dynamic public var lowCredits: PRConfiguration.LowCreditsConfig? {
    @objc get
  }
  @objc dynamic public var isFollowEnabled: Swift.Bool {
    @objc get
  }
  @objc dynamic public var hidePremiumButton: Swift.Bool {
    @objc get
  }
  @objc dynamic public var shouldSendAnalyticsEventForPremiumAvailable: Swift.Bool {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers final public class LowCreditsConfig : PRConfiguration.Config {
  @objc final public var alertReappearanceTimeInterval: Foundation.TimeInterval {
    @objc get
  }
  final public var isNoticeEnabled: Combine.CurrentValueSubject<Swift.Bool, Swift.Never> {
    get
  }
  @objc final public var isAdviceEnabled: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class OAuth2Config : ObjectiveC.NSObject {
  final public var consumerKey: Swift.String? {
    get
  }
  final public var authorizeUrl: Swift.String? {
    get
  }
  final public var scope: Swift.String? {
    get
  }
  final public var tokenUrl: Swift.String? {
    get
  }
  final public var providerName: Swift.String? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class GoogleConfig : ObjectiveC.NSObject {
  final public var appId: Swift.String? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc extension PRConfiguration.PRConfig {
  @objc public static func refresh()
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class LibraryConfig : ObjectiveC.NSObject {
  @objc final public var renewableIssueLicense: Swift.Bool {
    @objc get
  }
  @objc final public var keepExpiredItems: Swift.Bool {
    @objc get
  }
  @objc final public var bookOfflineAccessPeriod: Foundation.TimeInterval {
    @objc get
  }
  @objc final public var myLibraryTitleStringKey: Swift.String {
    @objc get
  }
  @objc final public var modernFeedAPIEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension PRConfiguration.PRConfig {
  public static var deallocAlertClasses: [Swift.String] {
    get
  }
  @objc public static var isPremiumEligibleUnconditionally: Swift.Bool {
    @objc get
  }
  @objc public static var userPermissionRequestsDisabled: Swift.Bool {
    @objc get
  }
  public static var serviceErrorAlertDisabled: Swift.Bool {
    get
  }
  @objc public static let dqRequestSimulation: PRConfiguration.RequestSimulation
  @objc public static let baseRequestSimulation: PRConfiguration.RequestSimulation
  @objc public static var requestCachesDisabled: Swift.Bool {
    @objc get
  }
}
@objc @objcMembers final public class Font : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let fileName: Swift.String
  @objc final public let pointSizeCorrection: Swift.Double
  @objc public init(fileName: Swift.String, pointSizeCorrection: Swift.Double = 0)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CustomerSupportConfig : ObjectiveC.NSObject {
  @objc public var show: Swift.Bool {
    @objc get
  }
  @objc public var email: Swift.String {
    @objc get
  }
  @objc public var emails: [Swift.String]? {
    @objc get
  }
  @objc public var phone: Swift.String? {
    @objc get
  }
  @objc public var cookiePolicyURL: Swift.String? {
    @objc get
  }
  @objc public var privacyPolicyURL: Swift.String? {
    @objc get
  }
  @objc public var termsOfUseURL: Swift.String? {
    @objc get
  }
  @objc public var manageSubscriptionURL: Swift.String {
    @objc get
  }
  @objc public var hideFeedbackEmailQuestion: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class AppInfoConfig : ObjectiveC.NSObject {
  @objc final public var appId: Swift.String? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class AppMenuConfig : ObjectiveC.NSObject {
  @objc public var showMoreItemsInPopUp: Swift.Bool {
    @objc get
  }
  @objc public var absence: PRConfiguration.PRAppMenuItemAbsence {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class FontConfig : ObjectiveC.NSObject {
  @objc final public var isFontSwizzlingEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var article: PRConfiguration.ArticleFontConfig? {
    @objc get
  }
  @objc final public var mainFont: Swift.String? {
    @objc get
  }
  @objc final public var mainBoldFont: Swift.String? {
    @objc get
  }
  @objc final public var secondaryFont: Swift.String? {
    @objc get
  }
  @objc final public var secondaryBoldFont: Swift.String? {
    @objc get
  }
  @objc final public var feedSection: PRConfiguration.Font? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class RequestSimulation : ObjectiveC.NSObject {
  public struct ResponseAttribute {
    public static let payload: Swift.String
    public static let delay: Swift.String
    public static let code: Swift.String
  }
  @objc final public func response(request: Swift.String, method: Swift.String) -> Foundation.Data?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ATTConfig : ObjectiveC.NSObject {
  @objc final public var isPermissionRequestEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticleFontConfig : ObjectiveC.NSObject {
  @objc final public let preview: PRConfiguration.ArticlePreviewFontConfig
  @objc final public var caption: PRConfiguration.Font? {
    @objc get
  }
  @objc final public var title: PRConfiguration.Font? {
    @objc get
  }
  @objc final public var subtitle: PRConfiguration.Font {
    @objc get
  }
  @objc final public var byline: PRConfiguration.Font? {
    @objc get
  }
  @objc final public var body: PRConfiguration.Font {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ArticlePreviewFontConfig : ObjectiveC.NSObject {
  @objc final public var body: PRConfiguration.Font? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class ShareConfig : ObjectiveC.NSObject {
  @objc final public var isEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isArticleEnabled: Swift.Bool {
    @objc get
  }
  @objc final public var isPageEnabled: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension PRConfiguration.PRAuthorizationConfig {
  @objc dynamic public var type: PRConfiguration.AuthorizationType {
    @objc get
  }
  public var frequency: PRConfiguration.AuthorizationRequestFrequency {
    get
  }
  public var auth0: PRConfiguration.Auth0Config? {
    get
  }
  public var facebook: PRConfiguration.FacebookConfig? {
    get
  }
  public var google: PRConfiguration.GoogleConfig? {
    get
  }
  public var oauth2: PRConfiguration.OAuth2Config? {
    get
  }
  @objc dynamic public var cleanWebView: Swift.Bool {
    @objc get
  }
  @objc dynamic public var externalAuthType: PRConfiguration.ExternalAuthType {
    @objc get
  }
}
@objc public enum AuthorizationType : Swift.Int {
  case optional
  case mandatory
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AuthorizationRequestFrequency {
  case never
  case once
  case appLaunch
  case days(days: Swift.Int)
}
@objc public enum ExternalAuthType : Swift.Int {
  case webView
  case webSession
  case safari
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PRConfiguration.PRCatalogSectionType : Swift.Equatable {}
extension PRConfiguration.PRCatalogSectionType : Swift.Hashable {}
extension PRConfiguration.PRCatalogSectionType : Swift.RawRepresentable {}
extension PRConfiguration.ArticleGalleryCaptionPosition : Swift.Equatable {}
extension PRConfiguration.ArticleGalleryCaptionPosition : Swift.Hashable {}
extension PRConfiguration.ArticleGalleryCaptionPosition : Swift.RawRepresentable {}
extension PRConfiguration.WidgetKind : Swift.Equatable {}
extension PRConfiguration.WidgetKind : Swift.Hashable {}
extension PRConfiguration.WidgetKind : Swift.RawRepresentable {}
extension PRConfiguration.IAPConfig.SortingOrder : Swift.Equatable {}
extension PRConfiguration.IAPConfig.SortingOrder : Swift.Hashable {}
extension PRConfiguration.IAPConfig.SortingOrder : Swift.RawRepresentable {}
extension PRConfiguration.AuthorizationType : Swift.Equatable {}
extension PRConfiguration.AuthorizationType : Swift.Hashable {}
extension PRConfiguration.AuthorizationType : Swift.RawRepresentable {}
extension PRConfiguration.ExternalAuthType : Swift.Equatable {}
extension PRConfiguration.ExternalAuthType : Swift.Hashable {}
extension PRConfiguration.ExternalAuthType : Swift.RawRepresentable {}
